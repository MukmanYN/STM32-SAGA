
H7_tut234.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007564  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08007834  08007834  00008834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080078d8  080078d8  000088d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080078e0  080078e0  000088e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080078e4  080078e4  000088e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  080078e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d4  24000064  0800794c  00009064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000338  0800794c  00009338  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001094f  00000000  00000000  00009092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000020d2  00000000  00000000  000199e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b28  00000000  00000000  0001bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000896  00000000  00000000  0001c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031d0a  00000000  00000000  0001ce76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010a13  00000000  00000000  0004eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001414ee  00000000  00000000  0005f593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a0a81  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000032bc  00000000  00000000  001a0ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001a3d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800781c 	.word	0x0800781c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	0800781c 	.word	0x0800781c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(huart == &huart3)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a05      	ldr	r2, [pc, #20]	@ (800070c <HAL_UART_TxCpltCallback+0x20>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d103      	bne.n	8000704 <HAL_UART_TxCpltCallback+0x18>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80006fc:	2102      	movs	r1, #2
 80006fe:	4804      	ldr	r0, [pc, #16]	@ (8000710 <HAL_UART_TxCpltCallback+0x24>)
 8000700:	f001 fde5 	bl	80022ce <HAL_GPIO_TogglePin>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000114 	.word	0x24000114
 8000710:	58021000 	.word	0x58021000

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800071a:	f000 fa2d 	bl	8000b78 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f000 fc97 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000722:	f000 f845 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f000 f94d 	bl	80009c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800072a:	f000 f8fd 	bl	8000928 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 800072e:	f000 f8ad 	bl	800088c <MX_LPUART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag == 1){
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <main+0x80>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d1fb      	bne.n	8000732 <main+0x1e>
		  now = HAL_GetTick(); // 1 ms free-running counter (SysTick)
 800073a:	f000 fd0f 	bl	800115c <HAL_GetTick>
 800073e:	4603      	mov	r3, r0
 8000740:	4a15      	ldr	r2, [pc, #84]	@ (8000798 <main+0x84>)
 8000742:	6013      	str	r3, [r2, #0]


		  if(now - lastime > 500){ // you gota
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <main+0x84>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <main+0x88>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000752:	d9ee      	bls.n	8000732 <main+0x1e>
			 int num = (now - lastime);
 8000754:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <main+0x84>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <main+0x88>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	607b      	str	r3, [r7, #4]
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000760:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000764:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <main+0x8c>)
 8000766:	f001 fdb2 	bl	80022ce <HAL_GPIO_TogglePin>
			 snprintf(buffer, sizeof(buffer), "Toggling the Red User LED %d time\n\r", num);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <main+0x90>)
 800076e:	2132      	movs	r1, #50	@ 0x32
 8000770:	480d      	ldr	r0, [pc, #52]	@ (80007a8 <main+0x94>)
 8000772:	f006 fb9f 	bl	8006eb4 <sniprintf>
			 HAL_UART_Transmit_IT(&huart3, (uint8_t *)buffer, strlen(buffer));
 8000776:	480c      	ldr	r0, [pc, #48]	@ (80007a8 <main+0x94>)
 8000778:	f7ff fdca 	bl	8000310 <strlen>
 800077c:	4603      	mov	r3, r0
 800077e:	b29b      	uxth	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	4909      	ldr	r1, [pc, #36]	@ (80007a8 <main+0x94>)
 8000784:	4809      	ldr	r0, [pc, #36]	@ (80007ac <main+0x98>)
 8000786:	f004 fb89 	bl	8004e9c <HAL_UART_Transmit_IT>
			 lastime = now; // reschedule next 500 ms window
 800078a:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <main+0x84>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a03      	ldr	r2, [pc, #12]	@ (800079c <main+0x88>)
 8000790:	6013      	str	r3, [r2, #0]
	  if (flag == 1){
 8000792:	e7ce      	b.n	8000732 <main+0x1e>
 8000794:	240001a8 	.word	0x240001a8
 8000798:	240001ac 	.word	0x240001ac
 800079c:	240001b0 	.word	0x240001b0
 80007a0:	58020400 	.word	0x58020400
 80007a4:	08007848 	.word	0x08007848
 80007a8:	240001b4 	.word	0x240001b4
 80007ac:	24000114 	.word	0x24000114

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09c      	sub	sp, #112	@ 0x70
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ba:	224c      	movs	r2, #76	@ 0x4c
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f006 fbae 	bl	8006f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2220      	movs	r2, #32
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f006 fba8 	bl	8006f20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007d0:	2002      	movs	r0, #2
 80007d2:	f001 fdb1 	bl	8002338 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <SystemClock_Config+0xd8>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a2a      	ldr	r2, [pc, #168]	@ (8000888 <SystemClock_Config+0xd8>)
 80007e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <SystemClock_Config+0xd8>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f2:	bf00      	nop
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <SystemClock_Config+0xd8>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000800:	d1f8      	bne.n	80007f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000806:	2301      	movs	r3, #1
 8000808:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800080a:	2340      	movs	r3, #64	@ 0x40
 800080c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000812:	2300      	movs	r3, #0
 8000814:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000816:	2304      	movs	r3, #4
 8000818:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800081a:	230c      	movs	r3, #12
 800081c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800082a:	230c      	movs	r3, #12
 800082c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800082e:	2300      	movs	r3, #0
 8000830:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fdb6 	bl	80023ac <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000846:	f000 f9c3 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	233f      	movs	r3, #63	@ 0x3f
 800084c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2303      	movs	r3, #3
 8000850:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV4;
 800085a:	2350      	movs	r3, #80	@ 0x50
 800085c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800085e:	2340      	movs	r3, #64	@ 0x40
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000866:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000868:	2340      	movs	r3, #64	@ 0x40
 800086a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2102      	movs	r1, #2
 8000870:	4618      	mov	r0, r3
 8000872:	f002 f975 	bl	8002b60 <HAL_RCC_ClockConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800087c:	f000 f9a8 	bl	8000bd0 <Error_Handler>
  }
}
 8000880:	bf00      	nop
 8000882:	3770      	adds	r7, #112	@ 0x70
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	58024800 	.word	0x58024800

0800088c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000890:	4b22      	ldr	r3, [pc, #136]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 8000892:	4a23      	ldr	r2, [pc, #140]	@ (8000920 <MX_LPUART1_UART_Init+0x94>)
 8000894:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000896:	4b21      	ldr	r3, [pc, #132]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 8000898:	4a22      	ldr	r2, [pc, #136]	@ (8000924 <MX_LPUART1_UART_Init+0x98>)
 800089a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089c:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 80008b0:	220c      	movs	r2, #12
 80008b2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b4:	4b19      	ldr	r3, [pc, #100]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c0:	4b16      	ldr	r3, [pc, #88]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008cc:	4b13      	ldr	r3, [pc, #76]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008d2:	4812      	ldr	r0, [pc, #72]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 80008d4:	f004 fa92 	bl	8004dfc <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80008de:	f000 f977 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	480d      	ldr	r0, [pc, #52]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 80008e6:	f006 fa1b 	bl	8006d20 <HAL_UARTEx_SetTxFifoThreshold>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80008f0:	f000 f96e 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4809      	ldr	r0, [pc, #36]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 80008f8:	f006 fa50 	bl	8006d9c <HAL_UARTEx_SetRxFifoThreshold>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000902:	f000 f965 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_LPUART1_UART_Init+0x90>)
 8000908:	f006 f9d1 	bl	8006cae <HAL_UARTEx_DisableFifoMode>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000912:	f000 f95d 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	24000080 	.word	0x24000080
 8000920:	58000c00 	.word	0x58000c00
 8000924:	00033324 	.word	0x00033324

08000928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 800092e:	4a23      	ldr	r2, [pc, #140]	@ (80009bc <MX_USART3_UART_Init+0x94>)
 8000930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 209700;
 8000932:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000934:	4a22      	ldr	r2, [pc, #136]	@ (80009c0 <MX_USART3_UART_Init+0x98>)
 8000936:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 800094c:	220c      	movs	r2, #12
 800094e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000950:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000956:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095c:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000968:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096e:	4812      	ldr	r0, [pc, #72]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000970:	f004 fa44 	bl	8004dfc <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800097a:	f000 f929 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000982:	f006 f9cd 	bl	8006d20 <HAL_UARTEx_SetTxFifoThreshold>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800098c:	f000 f920 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000994:	f006 fa02 	bl	8006d9c <HAL_UARTEx_SetRxFifoThreshold>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800099e:	f000 f917 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 80009a4:	f006 f983 	bl	8006cae <HAL_UARTEx_DisableFifoMode>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80009ae:	f000 f90f 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	24000114 	.word	0x24000114
 80009bc:	40004800 	.word	0x40004800
 80009c0:	00033324 	.word	0x00033324

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	@ 0x30
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b4e      	ldr	r3, [pc, #312]	@ (8000b14 <MX_GPIO_Init+0x150>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e0:	4a4c      	ldr	r2, [pc, #304]	@ (8000b14 <MX_GPIO_Init+0x150>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ea:	4b4a      	ldr	r3, [pc, #296]	@ (8000b14 <MX_GPIO_Init+0x150>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f8:	4b46      	ldr	r3, [pc, #280]	@ (8000b14 <MX_GPIO_Init+0x150>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fe:	4a45      	ldr	r2, [pc, #276]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a08:	4b42      	ldr	r3, [pc, #264]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b3f      	ldr	r3, [pc, #252]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1c:	4a3d      	ldr	r2, [pc, #244]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a26:	4b3b      	ldr	r3, [pc, #236]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a34:	4b37      	ldr	r3, [pc, #220]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3a:	4a36      	ldr	r2, [pc, #216]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a44:	4b33      	ldr	r3, [pc, #204]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b30      	ldr	r3, [pc, #192]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a58:	4a2e      	ldr	r2, [pc, #184]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a62:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a70:	4b28      	ldr	r3, [pc, #160]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a76:	4a27      	ldr	r2, [pc, #156]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a78:	f043 0310 	orr.w	r3, r3, #16
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a94:	4820      	ldr	r0, [pc, #128]	@ (8000b18 <MX_GPIO_Init+0x154>)
 8000a96:	f001 fc01 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	481f      	ldr	r0, [pc, #124]	@ (8000b1c <MX_GPIO_Init+0x158>)
 8000aa0:	f001 fbfc 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aaa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4819      	ldr	r0, [pc, #100]	@ (8000b20 <MX_GPIO_Init+0x15c>)
 8000abc:	f001 fa46 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000ac0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480f      	ldr	r0, [pc, #60]	@ (8000b18 <MX_GPIO_Init+0x154>)
 8000ada:	f001 fa37 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4809      	ldr	r0, [pc, #36]	@ (8000b1c <MX_GPIO_Init+0x158>)
 8000af6:	f001 fa29 	bl	8001f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2028      	movs	r0, #40	@ 0x28
 8000b00:	f000 fc13 	bl	800132a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b04:	2028      	movs	r0, #40	@ 0x28
 8000b06:	f000 fc2a 	bl	800135e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3730      	adds	r7, #48	@ 0x30
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	58024400 	.word	0x58024400
 8000b18:	58020400 	.word	0x58020400
 8000b1c:	58021000 	.word	0x58021000
 8000b20:	58020800 	.word	0x58020800

08000b24 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */

  if(GPIO_Pin == GPIO_PIN_13){
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b34:	d114      	bne.n	8000b60 <HAL_GPIO_EXTI_Callback+0x3c>
	  size_t length = strlen(hp);
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fbe8 	bl	8000310 <strlen>
 8000b40:	60f8      	str	r0, [r7, #12]
	  HAL_UART_Transmit_IT(&huart3, (uint8_t *)hp, length);
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	b292      	uxth	r2, r2
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <HAL_GPIO_EXTI_Callback+0x48>)
 8000b4e:	f004 f9a5 	bl	8004e9c <HAL_UART_Transmit_IT>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000b52:	2101      	movs	r1, #1
 8000b54:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b56:	f001 fbba 	bl	80022ce <HAL_GPIO_TogglePin>
	  flag = 1;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x50>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
  }
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	24000000 	.word	0x24000000
 8000b6c:	24000114 	.word	0x24000114
 8000b70:	58020400 	.word	0x58020400
 8000b74:	240001a8 	.word	0x240001a8

08000b78 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b8a:	f000 fc03 	bl	8001394 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b9a:	231f      	movs	r3, #31
 8000b9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b9e:	2387      	movs	r3, #135	@ 0x87
 8000ba0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fc21 	bl	8001404 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bc2:	2004      	movs	r0, #4
 8000bc4:	f000 fbfe 	bl	80013c4 <HAL_MPU_Enable>

}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <HAL_MspInit+0x30>)
 8000be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000be8:	4a08      	ldr	r2, [pc, #32]	@ (8000c0c <HAL_MspInit+0x30>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_MspInit+0x30>)
 8000bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	58024400 	.word	0x58024400

08000c10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b0ba      	sub	sp, #232	@ 0xe8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	22b8      	movs	r2, #184	@ 0xb8
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f006 f975 	bl	8006f20 <memset>
  if(huart->Instance==LPUART1)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a55      	ldr	r2, [pc, #340]	@ (8000d90 <HAL_UART_MspInit+0x180>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d14f      	bne.n	8000ce0 <HAL_UART_MspInit+0xd0>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c40:	f04f 0204 	mov.w	r2, #4
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c52:	f107 0318 	add.w	r3, r7, #24
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fb0e 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c62:	f7ff ffb5 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c66:	4b4b      	ldr	r3, [pc, #300]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c6c:	4a49      	ldr	r2, [pc, #292]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000c6e:	f043 0308 	orr.w	r3, r3, #8
 8000c72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c76:	4b47      	ldr	r3, [pc, #284]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b43      	ldr	r3, [pc, #268]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8a:	4a42      	ldr	r2, [pc, #264]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c94:	4b3f      	ldr	r3, [pc, #252]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ca2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4833      	ldr	r0, [pc, #204]	@ (8000d98 <HAL_UART_MspInit+0x188>)
 8000cca:	f001 f93f 	bl	8001f4c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	208e      	movs	r0, #142	@ 0x8e
 8000cd4:	f000 fb29 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000cd8:	208e      	movs	r0, #142	@ 0x8e
 8000cda:	f000 fb40 	bl	800135e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cde:	e053      	b.n	8000d88 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8000d9c <HAL_UART_MspInit+0x18c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d14e      	bne.n	8000d88 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cea:	f04f 0202 	mov.w	r2, #2
 8000cee:	f04f 0300 	mov.w	r3, #0
 8000cf2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 fab9 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8000d0c:	f7ff ff60 	bl	8000bd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d10:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d16:	4a1f      	ldr	r2, [pc, #124]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d20:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	4a17      	ldr	r2, [pc, #92]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_UART_MspInit+0x184>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d66:	2307      	movs	r3, #7
 8000d68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d70:	4619      	mov	r1, r3
 8000d72:	480b      	ldr	r0, [pc, #44]	@ (8000da0 <HAL_UART_MspInit+0x190>)
 8000d74:	f001 f8ea 	bl	8001f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2027      	movs	r0, #39	@ 0x27
 8000d7e:	f000 fad4 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d82:	2027      	movs	r0, #39	@ 0x27
 8000d84:	f000 faeb 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 8000d88:	bf00      	nop
 8000d8a:	37e8      	adds	r7, #232	@ 0xe8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	58000c00 	.word	0x58000c00
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58020000 	.word	0x58020000
 8000d9c:	40004800 	.word	0x40004800
 8000da0:	58020c00 	.word	0x58020c00

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <NMI_Handler+0x4>

08000dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <MemManage_Handler+0x4>

08000dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfa:	f000 f99b 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <USART3_IRQHandler+0x10>)
 8000e0a:	f004 f8db 	bl	8004fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	24000114 	.word	0x24000114

08000e18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e20:	f001 fa6f 	bl	8002302 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000e2c:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <LPUART1_IRQHandler+0x10>)
 8000e2e:	f004 f8c9 	bl	8004fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	24000080 	.word	0x24000080

08000e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e44:	4a14      	ldr	r2, [pc, #80]	@ (8000e98 <_sbrk+0x5c>)
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <_sbrk+0x60>)
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <_sbrk+0x64>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <_sbrk+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d207      	bcs.n	8000e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e6c:	f006 f860 	bl	8006f30 <__errno>
 8000e70:	4603      	mov	r3, r0
 8000e72:	220c      	movs	r2, #12
 8000e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	e009      	b.n	8000e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e82:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <_sbrk+0x64>)
 8000e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	24050000 	.word	0x24050000
 8000e9c:	00000400 	.word	0x00000400
 8000ea0:	240001e8 	.word	0x240001e8
 8000ea4:	24000338 	.word	0x24000338

08000ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000eac:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa8 <SystemInit+0x100>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eb2:	4a3d      	ldr	r2, [pc, #244]	@ (8000fa8 <SystemInit+0x100>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8000fac <SystemInit+0x104>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	2b06      	cmp	r3, #6
 8000ec6:	d807      	bhi.n	8000ed8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ec8:	4b38      	ldr	r3, [pc, #224]	@ (8000fac <SystemInit+0x104>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f023 030f 	bic.w	r3, r3, #15
 8000ed0:	4a36      	ldr	r2, [pc, #216]	@ (8000fac <SystemInit+0x104>)
 8000ed2:	f043 0307 	orr.w	r3, r3, #7
 8000ed6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ed8:	4b35      	ldr	r3, [pc, #212]	@ (8000fb0 <SystemInit+0x108>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a34      	ldr	r2, [pc, #208]	@ (8000fb0 <SystemInit+0x108>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ee4:	4b32      	ldr	r3, [pc, #200]	@ (8000fb0 <SystemInit+0x108>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000eea:	4b31      	ldr	r3, [pc, #196]	@ (8000fb0 <SystemInit+0x108>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4930      	ldr	r1, [pc, #192]	@ (8000fb0 <SystemInit+0x108>)
 8000ef0:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <SystemInit+0x10c>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8000fac <SystemInit+0x104>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f02:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <SystemInit+0x104>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 030f 	bic.w	r3, r3, #15
 8000f0a:	4a28      	ldr	r2, [pc, #160]	@ (8000fac <SystemInit+0x104>)
 8000f0c:	f043 0307 	orr.w	r3, r3, #7
 8000f10:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f12:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <SystemInit+0x108>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f18:	4b25      	ldr	r3, [pc, #148]	@ (8000fb0 <SystemInit+0x108>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f1e:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <SystemInit+0x108>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f24:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <SystemInit+0x108>)
 8000f26:	4a24      	ldr	r2, [pc, #144]	@ (8000fb8 <SystemInit+0x110>)
 8000f28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <SystemInit+0x108>)
 8000f2c:	4a23      	ldr	r2, [pc, #140]	@ (8000fbc <SystemInit+0x114>)
 8000f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <SystemInit+0x108>)
 8000f32:	4a23      	ldr	r2, [pc, #140]	@ (8000fc0 <SystemInit+0x118>)
 8000f34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <SystemInit+0x108>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <SystemInit+0x108>)
 8000f3e:	4a20      	ldr	r2, [pc, #128]	@ (8000fc0 <SystemInit+0x118>)
 8000f40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <SystemInit+0x108>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <SystemInit+0x108>)
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc0 <SystemInit+0x118>)
 8000f4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <SystemInit+0x108>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f54:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <SystemInit+0x108>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a15      	ldr	r2, [pc, #84]	@ (8000fb0 <SystemInit+0x108>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f60:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <SystemInit+0x108>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <SystemInit+0x108>)
 8000f68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d113      	bne.n	8000f9c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f74:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <SystemInit+0x108>)
 8000f76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb0 <SystemInit+0x108>)
 8000f7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f80:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <SystemInit+0x11c>)
 8000f86:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f8a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <SystemInit+0x108>)
 8000f8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f92:	4a07      	ldr	r2, [pc, #28]	@ (8000fb0 <SystemInit+0x108>)
 8000f94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f98:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00
 8000fac:	52002000 	.word	0x52002000
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fb8:	02020200 	.word	0x02020200
 8000fbc:	01ff0000 	.word	0x01ff0000
 8000fc0:	01010280 	.word	0x01010280
 8000fc4:	52004000 	.word	0x52004000

08000fc8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <ExitRun0Mode+0x2c>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <ExitRun0Mode+0x2c>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000fd8:	bf00      	nop
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <ExitRun0Mode+0x2c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f9      	beq.n	8000fda <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	58024800 	.word	0x58024800

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001034 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000ffc:	f7ff ffe4 	bl	8000fc8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001000:	f7ff ff52 	bl	8000ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	@ (800103c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f005 ff87 	bl	8006f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fb71 	bl	8000714 <main>
  bx  lr
 8001032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001038:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800103c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001040:	080078e8 	.word	0x080078e8
  ldr r2, =_sbss
 8001044:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001048:	24000338 	.word	0x24000338

0800104c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC3_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001056:	2003      	movs	r0, #3
 8001058:	f000 f95c 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800105c:	f001 ff36 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8001060:	4602      	mov	r2, r0
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_Init+0x68>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	4913      	ldr	r1, [pc, #76]	@ (80010bc <HAL_Init+0x6c>)
 800106e:	5ccb      	ldrb	r3, [r1, r3]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	fa22 f303 	lsr.w	r3, r2, r3
 8001078:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_Init+0x68>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <HAL_Init+0x6c>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_Init+0x70>)
 8001092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <HAL_Init+0x74>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109a:	200f      	movs	r0, #15
 800109c:	f000 f814 	bl	80010c8 <HAL_InitTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e002      	b.n	80010b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010aa:	f7ff fd97 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	58024400 	.word	0x58024400
 80010bc:	0800786c 	.word	0x0800786c
 80010c0:	24000008 	.word	0x24000008
 80010c4:	24000004 	.word	0x24000004

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_InitTick+0x60>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e021      	b.n	8001120 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_InitTick+0x64>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <HAL_InitTick+0x60>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f941 	bl	800137a <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f90b 	bl	800132a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <HAL_InitTick+0x68>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	24000010 	.word	0x24000010
 800112c:	24000004 	.word	0x24000004
 8001130:	2400000c 	.word	0x2400000c

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	24000010 	.word	0x24000010
 8001158:	240001ec 	.word	0x240001ec

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	240001ec 	.word	0x240001ec

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x40>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00
 80011b8:	05fa0000 	.word	0x05fa0000

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4907      	ldr	r1, [pc, #28]	@ (8001210 <__NVIC_EnableIRQ+0x38>)
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	@ (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	@ (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	@ 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	@ 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f7ff ff8e 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff29 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff40 	bl	80011bc <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff90 	bl	8001268 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5f 	bl	8001214 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff33 	bl	80011d8 <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa4 	bl	80012d0 <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001398:	f3bf 8f5f 	dmb	sy
}
 800139c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800139e:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <HAL_MPU_Disable+0x28>)
 80013a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a2:	4a06      	ldr	r2, [pc, #24]	@ (80013bc <HAL_MPU_Disable+0x28>)
 80013a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013aa:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <HAL_MPU_Disable+0x2c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	e000ed90 	.word	0xe000ed90

080013c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013cc:	4a0b      	ldr	r2, [pc, #44]	@ (80013fc <HAL_MPU_Enable+0x38>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_MPU_Enable+0x3c>)
 80013d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013da:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <HAL_MPU_Enable+0x3c>)
 80013dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013e2:	f3bf 8f4f 	dsb	sy
}
 80013e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013e8:	f3bf 8f6f 	isb	sy
}
 80013ec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed90 	.word	0xe000ed90
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	785a      	ldrb	r2, [r3, #1]
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <HAL_MPU_ConfigRegion+0x7c>)
 8001412:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001414:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <HAL_MPU_ConfigRegion+0x7c>)
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	4a19      	ldr	r2, [pc, #100]	@ (8001480 <HAL_MPU_ConfigRegion+0x7c>)
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001420:	4a17      	ldr	r2, [pc, #92]	@ (8001480 <HAL_MPU_ConfigRegion+0x7c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7b1b      	ldrb	r3, [r3, #12]
 800142c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7adb      	ldrb	r3, [r3, #11]
 8001432:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001434:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7a9b      	ldrb	r3, [r3, #10]
 800143a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800143c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7b5b      	ldrb	r3, [r3, #13]
 8001442:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001444:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7b9b      	ldrb	r3, [r3, #14]
 800144a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800144c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7bdb      	ldrb	r3, [r3, #15]
 8001452:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001454:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7a5b      	ldrb	r3, [r3, #9]
 800145a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800145c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7a1b      	ldrb	r3, [r3, #8]
 8001462:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001464:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	7812      	ldrb	r2, [r2, #0]
 800146a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800146e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001470:	6113      	str	r3, [r2, #16]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed90 	.word	0xe000ed90

08001484 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff fe66 	bl	800115c <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e2dc      	b.n	8001a56 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d008      	beq.n	80014ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2280      	movs	r2, #128	@ 0x80
 80014ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e2cd      	b.n	8001a56 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a76      	ldr	r2, [pc, #472]	@ (8001698 <HAL_DMA_Abort+0x214>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d04a      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a74      	ldr	r2, [pc, #464]	@ (800169c <HAL_DMA_Abort+0x218>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d045      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a73      	ldr	r2, [pc, #460]	@ (80016a0 <HAL_DMA_Abort+0x21c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d040      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a71      	ldr	r2, [pc, #452]	@ (80016a4 <HAL_DMA_Abort+0x220>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d03b      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a70      	ldr	r2, [pc, #448]	@ (80016a8 <HAL_DMA_Abort+0x224>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d036      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	@ (80016ac <HAL_DMA_Abort+0x228>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d031      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a6d      	ldr	r2, [pc, #436]	@ (80016b0 <HAL_DMA_Abort+0x22c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d02c      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a6b      	ldr	r2, [pc, #428]	@ (80016b4 <HAL_DMA_Abort+0x230>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d027      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a6a      	ldr	r2, [pc, #424]	@ (80016b8 <HAL_DMA_Abort+0x234>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d022      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a68      	ldr	r2, [pc, #416]	@ (80016bc <HAL_DMA_Abort+0x238>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d01d      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a67      	ldr	r2, [pc, #412]	@ (80016c0 <HAL_DMA_Abort+0x23c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d018      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a65      	ldr	r2, [pc, #404]	@ (80016c4 <HAL_DMA_Abort+0x240>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a64      	ldr	r2, [pc, #400]	@ (80016c8 <HAL_DMA_Abort+0x244>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d00e      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a62      	ldr	r2, [pc, #392]	@ (80016cc <HAL_DMA_Abort+0x248>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d009      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a61      	ldr	r2, [pc, #388]	@ (80016d0 <HAL_DMA_Abort+0x24c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d004      	beq.n	800155a <HAL_DMA_Abort+0xd6>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a5f      	ldr	r2, [pc, #380]	@ (80016d4 <HAL_DMA_Abort+0x250>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_DMA_Abort+0xda>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_DMA_Abort+0xdc>
 800155e:	2300      	movs	r3, #0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d013      	beq.n	800158c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 021e 	bic.w	r2, r2, #30
 8001572:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001582:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e00a      	b.n	80015a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 020e 	bic.w	r2, r2, #14
 800159a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a3c      	ldr	r2, [pc, #240]	@ (8001698 <HAL_DMA_Abort+0x214>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d072      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a3a      	ldr	r2, [pc, #232]	@ (800169c <HAL_DMA_Abort+0x218>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d06d      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a39      	ldr	r2, [pc, #228]	@ (80016a0 <HAL_DMA_Abort+0x21c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d068      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a37      	ldr	r2, [pc, #220]	@ (80016a4 <HAL_DMA_Abort+0x220>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d063      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a36      	ldr	r2, [pc, #216]	@ (80016a8 <HAL_DMA_Abort+0x224>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d05e      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a34      	ldr	r2, [pc, #208]	@ (80016ac <HAL_DMA_Abort+0x228>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d059      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a33      	ldr	r2, [pc, #204]	@ (80016b0 <HAL_DMA_Abort+0x22c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d054      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a31      	ldr	r2, [pc, #196]	@ (80016b4 <HAL_DMA_Abort+0x230>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d04f      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a30      	ldr	r2, [pc, #192]	@ (80016b8 <HAL_DMA_Abort+0x234>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d04a      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2e      	ldr	r2, [pc, #184]	@ (80016bc <HAL_DMA_Abort+0x238>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d045      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2d      	ldr	r2, [pc, #180]	@ (80016c0 <HAL_DMA_Abort+0x23c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d040      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2b      	ldr	r2, [pc, #172]	@ (80016c4 <HAL_DMA_Abort+0x240>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d03b      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a2a      	ldr	r2, [pc, #168]	@ (80016c8 <HAL_DMA_Abort+0x244>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d036      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a28      	ldr	r2, [pc, #160]	@ (80016cc <HAL_DMA_Abort+0x248>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d031      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a27      	ldr	r2, [pc, #156]	@ (80016d0 <HAL_DMA_Abort+0x24c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d02c      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a25      	ldr	r2, [pc, #148]	@ (80016d4 <HAL_DMA_Abort+0x250>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d027      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a24      	ldr	r2, [pc, #144]	@ (80016d8 <HAL_DMA_Abort+0x254>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d022      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a22      	ldr	r2, [pc, #136]	@ (80016dc <HAL_DMA_Abort+0x258>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d01d      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <HAL_DMA_Abort+0x25c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d018      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1f      	ldr	r2, [pc, #124]	@ (80016e4 <HAL_DMA_Abort+0x260>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1e      	ldr	r2, [pc, #120]	@ (80016e8 <HAL_DMA_Abort+0x264>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00e      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1c      	ldr	r2, [pc, #112]	@ (80016ec <HAL_DMA_Abort+0x268>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d009      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1b      	ldr	r2, [pc, #108]	@ (80016f0 <HAL_DMA_Abort+0x26c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d004      	beq.n	8001692 <HAL_DMA_Abort+0x20e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	@ (80016f4 <HAL_DMA_Abort+0x270>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d132      	bne.n	80016f8 <HAL_DMA_Abort+0x274>
 8001692:	2301      	movs	r3, #1
 8001694:	e031      	b.n	80016fa <HAL_DMA_Abort+0x276>
 8001696:	bf00      	nop
 8001698:	40020010 	.word	0x40020010
 800169c:	40020028 	.word	0x40020028
 80016a0:	40020040 	.word	0x40020040
 80016a4:	40020058 	.word	0x40020058
 80016a8:	40020070 	.word	0x40020070
 80016ac:	40020088 	.word	0x40020088
 80016b0:	400200a0 	.word	0x400200a0
 80016b4:	400200b8 	.word	0x400200b8
 80016b8:	40020410 	.word	0x40020410
 80016bc:	40020428 	.word	0x40020428
 80016c0:	40020440 	.word	0x40020440
 80016c4:	40020458 	.word	0x40020458
 80016c8:	40020470 	.word	0x40020470
 80016cc:	40020488 	.word	0x40020488
 80016d0:	400204a0 	.word	0x400204a0
 80016d4:	400204b8 	.word	0x400204b8
 80016d8:	58025408 	.word	0x58025408
 80016dc:	5802541c 	.word	0x5802541c
 80016e0:	58025430 	.word	0x58025430
 80016e4:	58025444 	.word	0x58025444
 80016e8:	58025458 	.word	0x58025458
 80016ec:	5802546c 	.word	0x5802546c
 80016f0:	58025480 	.word	0x58025480
 80016f4:	58025494 	.word	0x58025494
 80016f8:	2300      	movs	r3, #0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800170c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6d      	ldr	r2, [pc, #436]	@ (80018c8 <HAL_DMA_Abort+0x444>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d04a      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a6b      	ldr	r2, [pc, #428]	@ (80018cc <HAL_DMA_Abort+0x448>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d045      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6a      	ldr	r2, [pc, #424]	@ (80018d0 <HAL_DMA_Abort+0x44c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d040      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a68      	ldr	r2, [pc, #416]	@ (80018d4 <HAL_DMA_Abort+0x450>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d03b      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a67      	ldr	r2, [pc, #412]	@ (80018d8 <HAL_DMA_Abort+0x454>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d036      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a65      	ldr	r2, [pc, #404]	@ (80018dc <HAL_DMA_Abort+0x458>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d031      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a64      	ldr	r2, [pc, #400]	@ (80018e0 <HAL_DMA_Abort+0x45c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d02c      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a62      	ldr	r2, [pc, #392]	@ (80018e4 <HAL_DMA_Abort+0x460>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d027      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a61      	ldr	r2, [pc, #388]	@ (80018e8 <HAL_DMA_Abort+0x464>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d022      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a5f      	ldr	r2, [pc, #380]	@ (80018ec <HAL_DMA_Abort+0x468>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01d      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a5e      	ldr	r2, [pc, #376]	@ (80018f0 <HAL_DMA_Abort+0x46c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d018      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a5c      	ldr	r2, [pc, #368]	@ (80018f4 <HAL_DMA_Abort+0x470>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5b      	ldr	r2, [pc, #364]	@ (80018f8 <HAL_DMA_Abort+0x474>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00e      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a59      	ldr	r2, [pc, #356]	@ (80018fc <HAL_DMA_Abort+0x478>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d009      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a58      	ldr	r2, [pc, #352]	@ (8001900 <HAL_DMA_Abort+0x47c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d004      	beq.n	80017ae <HAL_DMA_Abort+0x32a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a56      	ldr	r2, [pc, #344]	@ (8001904 <HAL_DMA_Abort+0x480>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d108      	bne.n	80017c0 <HAL_DMA_Abort+0x33c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0201 	bic.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e007      	b.n	80017d0 <HAL_DMA_Abort+0x34c>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80017d0:	e013      	b.n	80017fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017d2:	f7ff fcc3 	bl	800115c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d90c      	bls.n	80017fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2220      	movs	r2, #32
 80017e4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2203      	movs	r2, #3
 80017ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e12d      	b.n	8001a56 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1e5      	bne.n	80017d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a2f      	ldr	r2, [pc, #188]	@ (80018c8 <HAL_DMA_Abort+0x444>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d04a      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a2d      	ldr	r2, [pc, #180]	@ (80018cc <HAL_DMA_Abort+0x448>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d045      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a2c      	ldr	r2, [pc, #176]	@ (80018d0 <HAL_DMA_Abort+0x44c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d040      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a2a      	ldr	r2, [pc, #168]	@ (80018d4 <HAL_DMA_Abort+0x450>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d03b      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a29      	ldr	r2, [pc, #164]	@ (80018d8 <HAL_DMA_Abort+0x454>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d036      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a27      	ldr	r2, [pc, #156]	@ (80018dc <HAL_DMA_Abort+0x458>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d031      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a26      	ldr	r2, [pc, #152]	@ (80018e0 <HAL_DMA_Abort+0x45c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d02c      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a24      	ldr	r2, [pc, #144]	@ (80018e4 <HAL_DMA_Abort+0x460>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d027      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a23      	ldr	r2, [pc, #140]	@ (80018e8 <HAL_DMA_Abort+0x464>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d022      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a21      	ldr	r2, [pc, #132]	@ (80018ec <HAL_DMA_Abort+0x468>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01d      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a20      	ldr	r2, [pc, #128]	@ (80018f0 <HAL_DMA_Abort+0x46c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d018      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1e      	ldr	r2, [pc, #120]	@ (80018f4 <HAL_DMA_Abort+0x470>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1d      	ldr	r2, [pc, #116]	@ (80018f8 <HAL_DMA_Abort+0x474>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00e      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1b      	ldr	r2, [pc, #108]	@ (80018fc <HAL_DMA_Abort+0x478>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d009      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1a      	ldr	r2, [pc, #104]	@ (8001900 <HAL_DMA_Abort+0x47c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d004      	beq.n	80018a6 <HAL_DMA_Abort+0x422>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <HAL_DMA_Abort+0x480>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_DMA_Abort+0x426>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_DMA_Abort+0x428>
 80018aa:	2300      	movs	r3, #0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d02b      	beq.n	8001908 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	223f      	movs	r2, #63	@ 0x3f
 80018c0:	409a      	lsls	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	e02a      	b.n	800191e <HAL_DMA_Abort+0x49a>
 80018c8:	40020010 	.word	0x40020010
 80018cc:	40020028 	.word	0x40020028
 80018d0:	40020040 	.word	0x40020040
 80018d4:	40020058 	.word	0x40020058
 80018d8:	40020070 	.word	0x40020070
 80018dc:	40020088 	.word	0x40020088
 80018e0:	400200a0 	.word	0x400200a0
 80018e4:	400200b8 	.word	0x400200b8
 80018e8:	40020410 	.word	0x40020410
 80018ec:	40020428 	.word	0x40020428
 80018f0:	40020440 	.word	0x40020440
 80018f4:	40020458 	.word	0x40020458
 80018f8:	40020470 	.word	0x40020470
 80018fc:	40020488 	.word	0x40020488
 8001900:	400204a0 	.word	0x400204a0
 8001904:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	2201      	movs	r2, #1
 8001918:	409a      	lsls	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a4f      	ldr	r2, [pc, #316]	@ (8001a60 <HAL_DMA_Abort+0x5dc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d072      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a64 <HAL_DMA_Abort+0x5e0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d06d      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a4c      	ldr	r2, [pc, #304]	@ (8001a68 <HAL_DMA_Abort+0x5e4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d068      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a4a      	ldr	r2, [pc, #296]	@ (8001a6c <HAL_DMA_Abort+0x5e8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d063      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a49      	ldr	r2, [pc, #292]	@ (8001a70 <HAL_DMA_Abort+0x5ec>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d05e      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a47      	ldr	r2, [pc, #284]	@ (8001a74 <HAL_DMA_Abort+0x5f0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d059      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a46      	ldr	r2, [pc, #280]	@ (8001a78 <HAL_DMA_Abort+0x5f4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d054      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a44      	ldr	r2, [pc, #272]	@ (8001a7c <HAL_DMA_Abort+0x5f8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d04f      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a43      	ldr	r2, [pc, #268]	@ (8001a80 <HAL_DMA_Abort+0x5fc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d04a      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a41      	ldr	r2, [pc, #260]	@ (8001a84 <HAL_DMA_Abort+0x600>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d045      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a40      	ldr	r2, [pc, #256]	@ (8001a88 <HAL_DMA_Abort+0x604>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d040      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a3e      	ldr	r2, [pc, #248]	@ (8001a8c <HAL_DMA_Abort+0x608>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d03b      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a90 <HAL_DMA_Abort+0x60c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d036      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001a94 <HAL_DMA_Abort+0x610>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d031      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001a98 <HAL_DMA_Abort+0x614>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d02c      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a38      	ldr	r2, [pc, #224]	@ (8001a9c <HAL_DMA_Abort+0x618>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d027      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a37      	ldr	r2, [pc, #220]	@ (8001aa0 <HAL_DMA_Abort+0x61c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d022      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a35      	ldr	r2, [pc, #212]	@ (8001aa4 <HAL_DMA_Abort+0x620>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01d      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a34      	ldr	r2, [pc, #208]	@ (8001aa8 <HAL_DMA_Abort+0x624>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d018      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a32      	ldr	r2, [pc, #200]	@ (8001aac <HAL_DMA_Abort+0x628>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a31      	ldr	r2, [pc, #196]	@ (8001ab0 <HAL_DMA_Abort+0x62c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00e      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab4 <HAL_DMA_Abort+0x630>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d009      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a2e      	ldr	r2, [pc, #184]	@ (8001ab8 <HAL_DMA_Abort+0x634>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d004      	beq.n	8001a0e <HAL_DMA_Abort+0x58a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a2c      	ldr	r2, [pc, #176]	@ (8001abc <HAL_DMA_Abort+0x638>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_DMA_Abort+0x58e>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_DMA_Abort+0x590>
 8001a12:	2300      	movs	r3, #0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d015      	beq.n	8001a44 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001a20:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00c      	beq.n	8001a44 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a38:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001a42:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40020010 	.word	0x40020010
 8001a64:	40020028 	.word	0x40020028
 8001a68:	40020040 	.word	0x40020040
 8001a6c:	40020058 	.word	0x40020058
 8001a70:	40020070 	.word	0x40020070
 8001a74:	40020088 	.word	0x40020088
 8001a78:	400200a0 	.word	0x400200a0
 8001a7c:	400200b8 	.word	0x400200b8
 8001a80:	40020410 	.word	0x40020410
 8001a84:	40020428 	.word	0x40020428
 8001a88:	40020440 	.word	0x40020440
 8001a8c:	40020458 	.word	0x40020458
 8001a90:	40020470 	.word	0x40020470
 8001a94:	40020488 	.word	0x40020488
 8001a98:	400204a0 	.word	0x400204a0
 8001a9c:	400204b8 	.word	0x400204b8
 8001aa0:	58025408 	.word	0x58025408
 8001aa4:	5802541c 	.word	0x5802541c
 8001aa8:	58025430 	.word	0x58025430
 8001aac:	58025444 	.word	0x58025444
 8001ab0:	58025458 	.word	0x58025458
 8001ab4:	5802546c 	.word	0x5802546c
 8001ab8:	58025480 	.word	0x58025480
 8001abc:	58025494 	.word	0x58025494

08001ac0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e237      	b.n	8001f42 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d004      	beq.n	8001ae8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2280      	movs	r2, #128	@ 0x80
 8001ae2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e22c      	b.n	8001f42 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a5c      	ldr	r2, [pc, #368]	@ (8001c60 <HAL_DMA_Abort_IT+0x1a0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d04a      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c64 <HAL_DMA_Abort_IT+0x1a4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d045      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a59      	ldr	r2, [pc, #356]	@ (8001c68 <HAL_DMA_Abort_IT+0x1a8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d040      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a58      	ldr	r2, [pc, #352]	@ (8001c6c <HAL_DMA_Abort_IT+0x1ac>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d03b      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a56      	ldr	r2, [pc, #344]	@ (8001c70 <HAL_DMA_Abort_IT+0x1b0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d036      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a55      	ldr	r2, [pc, #340]	@ (8001c74 <HAL_DMA_Abort_IT+0x1b4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d031      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a53      	ldr	r2, [pc, #332]	@ (8001c78 <HAL_DMA_Abort_IT+0x1b8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d02c      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a52      	ldr	r2, [pc, #328]	@ (8001c7c <HAL_DMA_Abort_IT+0x1bc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d027      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a50      	ldr	r2, [pc, #320]	@ (8001c80 <HAL_DMA_Abort_IT+0x1c0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d022      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a4f      	ldr	r2, [pc, #316]	@ (8001c84 <HAL_DMA_Abort_IT+0x1c4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d01d      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a4d      	ldr	r2, [pc, #308]	@ (8001c88 <HAL_DMA_Abort_IT+0x1c8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d018      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a4c      	ldr	r2, [pc, #304]	@ (8001c8c <HAL_DMA_Abort_IT+0x1cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d013      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a4a      	ldr	r2, [pc, #296]	@ (8001c90 <HAL_DMA_Abort_IT+0x1d0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00e      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a49      	ldr	r2, [pc, #292]	@ (8001c94 <HAL_DMA_Abort_IT+0x1d4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d009      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a47      	ldr	r2, [pc, #284]	@ (8001c98 <HAL_DMA_Abort_IT+0x1d8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d004      	beq.n	8001b88 <HAL_DMA_Abort_IT+0xc8>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a46      	ldr	r2, [pc, #280]	@ (8001c9c <HAL_DMA_Abort_IT+0x1dc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d101      	bne.n	8001b8c <HAL_DMA_Abort_IT+0xcc>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_DMA_Abort_IT+0xce>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8086 	beq.w	8001ca0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2204      	movs	r2, #4
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8001c60 <HAL_DMA_Abort_IT+0x1a0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d04a      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a2e      	ldr	r2, [pc, #184]	@ (8001c64 <HAL_DMA_Abort_IT+0x1a4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d045      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8001c68 <HAL_DMA_Abort_IT+0x1a8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d040      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8001c6c <HAL_DMA_Abort_IT+0x1ac>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d03b      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a29      	ldr	r2, [pc, #164]	@ (8001c70 <HAL_DMA_Abort_IT+0x1b0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d036      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a28      	ldr	r2, [pc, #160]	@ (8001c74 <HAL_DMA_Abort_IT+0x1b4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d031      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a26      	ldr	r2, [pc, #152]	@ (8001c78 <HAL_DMA_Abort_IT+0x1b8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d02c      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a25      	ldr	r2, [pc, #148]	@ (8001c7c <HAL_DMA_Abort_IT+0x1bc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d027      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a23      	ldr	r2, [pc, #140]	@ (8001c80 <HAL_DMA_Abort_IT+0x1c0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d022      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a22      	ldr	r2, [pc, #136]	@ (8001c84 <HAL_DMA_Abort_IT+0x1c4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d01d      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a20      	ldr	r2, [pc, #128]	@ (8001c88 <HAL_DMA_Abort_IT+0x1c8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d018      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_DMA_Abort_IT+0x1cc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1d      	ldr	r2, [pc, #116]	@ (8001c90 <HAL_DMA_Abort_IT+0x1d0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00e      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1c      	ldr	r2, [pc, #112]	@ (8001c94 <HAL_DMA_Abort_IT+0x1d4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d009      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c98 <HAL_DMA_Abort_IT+0x1d8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x17c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a19      	ldr	r2, [pc, #100]	@ (8001c9c <HAL_DMA_Abort_IT+0x1dc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d108      	bne.n	8001c4e <HAL_DMA_Abort_IT+0x18e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e178      	b.n	8001f40 <HAL_DMA_Abort_IT+0x480>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e16f      	b.n	8001f40 <HAL_DMA_Abort_IT+0x480>
 8001c60:	40020010 	.word	0x40020010
 8001c64:	40020028 	.word	0x40020028
 8001c68:	40020040 	.word	0x40020040
 8001c6c:	40020058 	.word	0x40020058
 8001c70:	40020070 	.word	0x40020070
 8001c74:	40020088 	.word	0x40020088
 8001c78:	400200a0 	.word	0x400200a0
 8001c7c:	400200b8 	.word	0x400200b8
 8001c80:	40020410 	.word	0x40020410
 8001c84:	40020428 	.word	0x40020428
 8001c88:	40020440 	.word	0x40020440
 8001c8c:	40020458 	.word	0x40020458
 8001c90:	40020470 	.word	0x40020470
 8001c94:	40020488 	.word	0x40020488
 8001c98:	400204a0 	.word	0x400204a0
 8001c9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 020e 	bic.w	r2, r2, #14
 8001cae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a6c      	ldr	r2, [pc, #432]	@ (8001e68 <HAL_DMA_Abort_IT+0x3a8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d04a      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a6b      	ldr	r2, [pc, #428]	@ (8001e6c <HAL_DMA_Abort_IT+0x3ac>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d045      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a69      	ldr	r2, [pc, #420]	@ (8001e70 <HAL_DMA_Abort_IT+0x3b0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d040      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a68      	ldr	r2, [pc, #416]	@ (8001e74 <HAL_DMA_Abort_IT+0x3b4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d03b      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a66      	ldr	r2, [pc, #408]	@ (8001e78 <HAL_DMA_Abort_IT+0x3b8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d036      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a65      	ldr	r2, [pc, #404]	@ (8001e7c <HAL_DMA_Abort_IT+0x3bc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d031      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a63      	ldr	r2, [pc, #396]	@ (8001e80 <HAL_DMA_Abort_IT+0x3c0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d02c      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a62      	ldr	r2, [pc, #392]	@ (8001e84 <HAL_DMA_Abort_IT+0x3c4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d027      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a60      	ldr	r2, [pc, #384]	@ (8001e88 <HAL_DMA_Abort_IT+0x3c8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d022      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8001e8c <HAL_DMA_Abort_IT+0x3cc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d01d      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a5d      	ldr	r2, [pc, #372]	@ (8001e90 <HAL_DMA_Abort_IT+0x3d0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d018      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a5c      	ldr	r2, [pc, #368]	@ (8001e94 <HAL_DMA_Abort_IT+0x3d4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a5a      	ldr	r2, [pc, #360]	@ (8001e98 <HAL_DMA_Abort_IT+0x3d8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00e      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a59      	ldr	r2, [pc, #356]	@ (8001e9c <HAL_DMA_Abort_IT+0x3dc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d009      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a57      	ldr	r2, [pc, #348]	@ (8001ea0 <HAL_DMA_Abort_IT+0x3e0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d004      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x290>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a56      	ldr	r2, [pc, #344]	@ (8001ea4 <HAL_DMA_Abort_IT+0x3e4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d108      	bne.n	8001d62 <HAL_DMA_Abort_IT+0x2a2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e007      	b.n	8001d72 <HAL_DMA_Abort_IT+0x2b2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a3c      	ldr	r2, [pc, #240]	@ (8001e68 <HAL_DMA_Abort_IT+0x3a8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d072      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a3a      	ldr	r2, [pc, #232]	@ (8001e6c <HAL_DMA_Abort_IT+0x3ac>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d06d      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a39      	ldr	r2, [pc, #228]	@ (8001e70 <HAL_DMA_Abort_IT+0x3b0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d068      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a37      	ldr	r2, [pc, #220]	@ (8001e74 <HAL_DMA_Abort_IT+0x3b4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d063      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a36      	ldr	r2, [pc, #216]	@ (8001e78 <HAL_DMA_Abort_IT+0x3b8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d05e      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a34      	ldr	r2, [pc, #208]	@ (8001e7c <HAL_DMA_Abort_IT+0x3bc>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d059      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a33      	ldr	r2, [pc, #204]	@ (8001e80 <HAL_DMA_Abort_IT+0x3c0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d054      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a31      	ldr	r2, [pc, #196]	@ (8001e84 <HAL_DMA_Abort_IT+0x3c4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d04f      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a30      	ldr	r2, [pc, #192]	@ (8001e88 <HAL_DMA_Abort_IT+0x3c8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d04a      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2e      	ldr	r2, [pc, #184]	@ (8001e8c <HAL_DMA_Abort_IT+0x3cc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d045      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a2d      	ldr	r2, [pc, #180]	@ (8001e90 <HAL_DMA_Abort_IT+0x3d0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d040      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e94 <HAL_DMA_Abort_IT+0x3d4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d03b      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2a      	ldr	r2, [pc, #168]	@ (8001e98 <HAL_DMA_Abort_IT+0x3d8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d036      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a28      	ldr	r2, [pc, #160]	@ (8001e9c <HAL_DMA_Abort_IT+0x3dc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d031      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a27      	ldr	r2, [pc, #156]	@ (8001ea0 <HAL_DMA_Abort_IT+0x3e0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d02c      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a25      	ldr	r2, [pc, #148]	@ (8001ea4 <HAL_DMA_Abort_IT+0x3e4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d027      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a24      	ldr	r2, [pc, #144]	@ (8001ea8 <HAL_DMA_Abort_IT+0x3e8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d022      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a22      	ldr	r2, [pc, #136]	@ (8001eac <HAL_DMA_Abort_IT+0x3ec>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01d      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a21      	ldr	r2, [pc, #132]	@ (8001eb0 <HAL_DMA_Abort_IT+0x3f0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d018      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb4 <HAL_DMA_Abort_IT+0x3f4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb8 <HAL_DMA_Abort_IT+0x3f8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d00e      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1c      	ldr	r2, [pc, #112]	@ (8001ebc <HAL_DMA_Abort_IT+0x3fc>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d009      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec0 <HAL_DMA_Abort_IT+0x400>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d004      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x3a2>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	@ (8001ec4 <HAL_DMA_Abort_IT+0x404>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d132      	bne.n	8001ec8 <HAL_DMA_Abort_IT+0x408>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e031      	b.n	8001eca <HAL_DMA_Abort_IT+0x40a>
 8001e66:	bf00      	nop
 8001e68:	40020010 	.word	0x40020010
 8001e6c:	40020028 	.word	0x40020028
 8001e70:	40020040 	.word	0x40020040
 8001e74:	40020058 	.word	0x40020058
 8001e78:	40020070 	.word	0x40020070
 8001e7c:	40020088 	.word	0x40020088
 8001e80:	400200a0 	.word	0x400200a0
 8001e84:	400200b8 	.word	0x400200b8
 8001e88:	40020410 	.word	0x40020410
 8001e8c:	40020428 	.word	0x40020428
 8001e90:	40020440 	.word	0x40020440
 8001e94:	40020458 	.word	0x40020458
 8001e98:	40020470 	.word	0x40020470
 8001e9c:	40020488 	.word	0x40020488
 8001ea0:	400204a0 	.word	0x400204a0
 8001ea4:	400204b8 	.word	0x400204b8
 8001ea8:	58025408 	.word	0x58025408
 8001eac:	5802541c 	.word	0x5802541c
 8001eb0:	58025430 	.word	0x58025430
 8001eb4:	58025444 	.word	0x58025444
 8001eb8:	58025458 	.word	0x58025458
 8001ebc:	5802546c 	.word	0x5802546c
 8001ec0:	58025480 	.word	0x58025480
 8001ec4:	58025494 	.word	0x58025494
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d028      	beq.n	8001f20 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001edc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2201      	movs	r2, #1
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001efc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f14:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f1e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	@ 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f5a:	4b86      	ldr	r3, [pc, #536]	@ (8002174 <HAL_GPIO_Init+0x228>)
 8001f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f5e:	e18c      	b.n	800227a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2101      	movs	r1, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 817e 	beq.w	8002274 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d005      	beq.n	8001f90 <HAL_GPIO_Init+0x44>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d130      	bne.n	8001ff2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	f003 0201 	and.w	r2, r3, #1
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d017      	beq.n	800202e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d123      	bne.n	8002082 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	69b9      	ldr	r1, [r7, #24]
 800207e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0203 	and.w	r2, r3, #3
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80d8 	beq.w	8002274 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002178 <HAL_GPIO_Init+0x22c>)
 80020c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002178 <HAL_GPIO_Init+0x22c>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020d4:	4b28      	ldr	r3, [pc, #160]	@ (8002178 <HAL_GPIO_Init+0x22c>)
 80020d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e2:	4a26      	ldr	r2, [pc, #152]	@ (800217c <HAL_GPIO_Init+0x230>)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a1d      	ldr	r2, [pc, #116]	@ (8002180 <HAL_GPIO_Init+0x234>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d04a      	beq.n	80021a4 <HAL_GPIO_Init+0x258>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1c      	ldr	r2, [pc, #112]	@ (8002184 <HAL_GPIO_Init+0x238>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d02b      	beq.n	800216e <HAL_GPIO_Init+0x222>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1b      	ldr	r2, [pc, #108]	@ (8002188 <HAL_GPIO_Init+0x23c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d025      	beq.n	800216a <HAL_GPIO_Init+0x21e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a1a      	ldr	r2, [pc, #104]	@ (800218c <HAL_GPIO_Init+0x240>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01f      	beq.n	8002166 <HAL_GPIO_Init+0x21a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a19      	ldr	r2, [pc, #100]	@ (8002190 <HAL_GPIO_Init+0x244>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_GPIO_Init+0x216>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a18      	ldr	r2, [pc, #96]	@ (8002194 <HAL_GPIO_Init+0x248>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_GPIO_Init+0x212>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a17      	ldr	r2, [pc, #92]	@ (8002198 <HAL_GPIO_Init+0x24c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00d      	beq.n	800215a <HAL_GPIO_Init+0x20e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a16      	ldr	r2, [pc, #88]	@ (800219c <HAL_GPIO_Init+0x250>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0x20a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a15      	ldr	r2, [pc, #84]	@ (80021a0 <HAL_GPIO_Init+0x254>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_Init+0x206>
 800214e:	2309      	movs	r3, #9
 8002150:	e029      	b.n	80021a6 <HAL_GPIO_Init+0x25a>
 8002152:	230a      	movs	r3, #10
 8002154:	e027      	b.n	80021a6 <HAL_GPIO_Init+0x25a>
 8002156:	2307      	movs	r3, #7
 8002158:	e025      	b.n	80021a6 <HAL_GPIO_Init+0x25a>
 800215a:	2306      	movs	r3, #6
 800215c:	e023      	b.n	80021a6 <HAL_GPIO_Init+0x25a>
 800215e:	2305      	movs	r3, #5
 8002160:	e021      	b.n	80021a6 <HAL_GPIO_Init+0x25a>
 8002162:	2304      	movs	r3, #4
 8002164:	e01f      	b.n	80021a6 <HAL_GPIO_Init+0x25a>
 8002166:	2303      	movs	r3, #3
 8002168:	e01d      	b.n	80021a6 <HAL_GPIO_Init+0x25a>
 800216a:	2302      	movs	r3, #2
 800216c:	e01b      	b.n	80021a6 <HAL_GPIO_Init+0x25a>
 800216e:	2301      	movs	r3, #1
 8002170:	e019      	b.n	80021a6 <HAL_GPIO_Init+0x25a>
 8002172:	bf00      	nop
 8002174:	58000080 	.word	0x58000080
 8002178:	58024400 	.word	0x58024400
 800217c:	58000400 	.word	0x58000400
 8002180:	58020000 	.word	0x58020000
 8002184:	58020400 	.word	0x58020400
 8002188:	58020800 	.word	0x58020800
 800218c:	58020c00 	.word	0x58020c00
 8002190:	58021000 	.word	0x58021000
 8002194:	58021400 	.word	0x58021400
 8002198:	58021800 	.word	0x58021800
 800219c:	58021c00 	.word	0x58021c00
 80021a0:	58022400 	.word	0x58022400
 80021a4:	2300      	movs	r3, #0
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	f002 0203 	and.w	r2, r2, #3
 80021ac:	0092      	lsls	r2, r2, #2
 80021ae:	4093      	lsls	r3, r2
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b6:	4938      	ldr	r1, [pc, #224]	@ (8002298 <HAL_GPIO_Init+0x34c>)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002218:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	3301      	adds	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	f47f ae6b 	bne.w	8001f60 <HAL_GPIO_Init+0x14>
  }
}
 800228a:	bf00      	nop
 800228c:	bf00      	nop
 800228e:	3724      	adds	r7, #36	@ 0x24
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	58000400 	.word	0x58000400

0800229c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
 80022a8:	4613      	mov	r3, r2
 80022aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ac:	787b      	ldrb	r3, [r7, #1]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022b8:	e003      	b.n	80022c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022ba:	887b      	ldrh	r3, [r7, #2]
 80022bc:	041a      	lsls	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	619a      	str	r2, [r3, #24]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e0:	887a      	ldrh	r2, [r7, #2]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	041a      	lsls	r2, r3, #16
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43d9      	mvns	r1, r3
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	400b      	ands	r3, r1
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	619a      	str	r2, [r3, #24]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002310:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	4013      	ands	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800231c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fbfb 	bl	8000b24 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_PWREx_ConfigSupply+0x70>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b04      	cmp	r3, #4
 800234a:	d00a      	beq.n	8002362 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800234c:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_PWREx_ConfigSupply+0x70>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e01f      	b.n	800239e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e01d      	b.n	800239e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002362:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <HAL_PWREx_ConfigSupply+0x70>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f023 0207 	bic.w	r2, r3, #7
 800236a:	490f      	ldr	r1, [pc, #60]	@ (80023a8 <HAL_PWREx_ConfigSupply+0x70>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4313      	orrs	r3, r2
 8002370:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002372:	f7fe fef3 	bl	800115c <HAL_GetTick>
 8002376:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002378:	e009      	b.n	800238e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800237a:	f7fe feef 	bl	800115c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002388:	d901      	bls.n	800238e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e007      	b.n	800239e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_PWREx_ConfigSupply+0x70>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800239a:	d1ee      	bne.n	800237a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	58024800 	.word	0x58024800

080023ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	@ 0x30
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e3c8      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8087 	beq.w	80024da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023cc:	4b88      	ldr	r3, [pc, #544]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023d6:	4b86      	ldr	r3, [pc, #536]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d007      	beq.n	80023f2 <HAL_RCC_OscConfig+0x46>
 80023e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e4:	2b18      	cmp	r3, #24
 80023e6:	d110      	bne.n	800240a <HAL_RCC_OscConfig+0x5e>
 80023e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d10b      	bne.n	800240a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f2:	4b7f      	ldr	r3, [pc, #508]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d06c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x12c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d168      	bne.n	80024d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e3a2      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x76>
 8002414:	4b76      	ldr	r3, [pc, #472]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a75      	ldr	r2, [pc, #468]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	e02e      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x98>
 800242a:	4b71      	ldr	r3, [pc, #452]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a70      	ldr	r2, [pc, #448]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b6e      	ldr	r3, [pc, #440]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6d      	ldr	r2, [pc, #436]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 800243c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0xbc>
 800244e:	4b68      	ldr	r3, [pc, #416]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a67      	ldr	r2, [pc, #412]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b65      	ldr	r3, [pc, #404]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a64      	ldr	r2, [pc, #400]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002468:	4b61      	ldr	r3, [pc, #388]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a60      	ldr	r2, [pc, #384]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b5e      	ldr	r3, [pc, #376]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a5d      	ldr	r2, [pc, #372]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800247e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe fe68 	bl	800115c <HAL_GetTick>
 800248c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7fe fe64 	bl	800115c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	@ 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e356      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024a2:	4b53      	ldr	r3, [pc, #332]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xe4>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fe54 	bl	800115c <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe fe50 	bl	800115c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	@ 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e342      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024ca:	4b49      	ldr	r3, [pc, #292]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x10c>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 808c 	beq.w	8002600 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e8:	4b41      	ldr	r3, [pc, #260]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024f2:	4b3f      	ldr	r3, [pc, #252]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <HAL_RCC_OscConfig+0x162>
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	2b18      	cmp	r3, #24
 8002502:	d137      	bne.n	8002574 <HAL_RCC_OscConfig+0x1c8>
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d132      	bne.n	8002574 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800250e:	4b38      	ldr	r3, [pc, #224]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x17a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e314      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002526:	4b32      	ldr	r3, [pc, #200]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 0219 	bic.w	r2, r3, #25
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	492f      	ldr	r1, [pc, #188]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fe10 	bl	800115c <HAL_GetTick>
 800253c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7fe fe0c 	bl	800115c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e2fe      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002552:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255e:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	4920      	ldr	r1, [pc, #128]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002572:	e045      	b.n	8002600 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d026      	beq.n	80025ca <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800257c:	4b1c      	ldr	r3, [pc, #112]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 0219 	bic.w	r2, r3, #25
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4919      	ldr	r1, [pc, #100]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe fde5 	bl	800115c <HAL_GetTick>
 8002592:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7fe fde1 	bl	800115c <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e2d3      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	490b      	ldr	r1, [pc, #44]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
 80025c8:	e01a      	b.n	8002600 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a08      	ldr	r2, [pc, #32]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7fe fdc1 	bl	800115c <HAL_GetTick>
 80025da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025de:	f7fe fdbd 	bl	800115c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d903      	bls.n	80025f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e2af      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
 80025f0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025f4:	4b96      	ldr	r3, [pc, #600]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d06a      	beq.n	80026e2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260c:	4b90      	ldr	r3, [pc, #576]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002614:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002616:	4b8e      	ldr	r3, [pc, #568]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2b08      	cmp	r3, #8
 8002620:	d007      	beq.n	8002632 <HAL_RCC_OscConfig+0x286>
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b18      	cmp	r3, #24
 8002626:	d11b      	bne.n	8002660 <HAL_RCC_OscConfig+0x2b4>
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d116      	bne.n	8002660 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002632:	4b87      	ldr	r3, [pc, #540]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_RCC_OscConfig+0x29e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	2b80      	cmp	r3, #128	@ 0x80
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e282      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800264a:	4b81      	ldr	r3, [pc, #516]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	061b      	lsls	r3, r3, #24
 8002658:	497d      	ldr	r1, [pc, #500]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800265e:	e040      	b.n	80026e2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d023      	beq.n	80026b0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002668:	4b79      	ldr	r3, [pc, #484]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a78      	ldr	r2, [pc, #480]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 800266e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe fd72 	bl	800115c <HAL_GetTick>
 8002678:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800267c:	f7fe fd6e 	bl	800115c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e260      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800268e:	4b70      	ldr	r3, [pc, #448]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800269a:	4b6d      	ldr	r3, [pc, #436]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	061b      	lsls	r3, r3, #24
 80026a8:	4969      	ldr	r1, [pc, #420]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60cb      	str	r3, [r1, #12]
 80026ae:	e018      	b.n	80026e2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026b0:	4b67      	ldr	r3, [pc, #412]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a66      	ldr	r2, [pc, #408]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 80026b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fd4e 	bl	800115c <HAL_GetTick>
 80026c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026c4:	f7fe fd4a 	bl	800115c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e23c      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026d6:	4b5e      	ldr	r3, [pc, #376]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d036      	beq.n	800275c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d019      	beq.n	800272a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f6:	4b56      	ldr	r3, [pc, #344]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 80026f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026fa:	4a55      	ldr	r2, [pc, #340]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002702:	f7fe fd2b 	bl	800115c <HAL_GetTick>
 8002706:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270a:	f7fe fd27 	bl	800115c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e219      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800271c:	4b4c      	ldr	r3, [pc, #304]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 800271e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x35e>
 8002728:	e018      	b.n	800275c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272a:	4b49      	ldr	r3, [pc, #292]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 800272c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272e:	4a48      	ldr	r2, [pc, #288]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7fe fd11 	bl	800115c <HAL_GetTick>
 800273a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273e:	f7fe fd0d 	bl	800115c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e1ff      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002750:	4b3f      	ldr	r3, [pc, #252]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d036      	beq.n	80027d6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d019      	beq.n	80027a4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002770:	4b37      	ldr	r3, [pc, #220]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a36      	ldr	r2, [pc, #216]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002776:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800277a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800277c:	f7fe fcee 	bl	800115c <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002784:	f7fe fcea 	bl	800115c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e1dc      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002796:	4b2e      	ldr	r3, [pc, #184]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x3d8>
 80027a2:	e018      	b.n	80027d6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a29      	ldr	r2, [pc, #164]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 80027aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027b0:	f7fe fcd4 	bl	800115c <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b8:	f7fe fcd0 	bl	800115c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e1c2      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027ca:	4b21      	ldr	r3, [pc, #132]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8086 	beq.w	80028f0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_RCC_OscConfig+0x4a8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002854 <HAL_RCC_OscConfig+0x4a8>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f0:	f7fe fcb4 	bl	800115c <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7fe fcb0 	bl	800115c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	@ 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e1a2      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_RCC_OscConfig+0x4a8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x480>
 800281e:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	4a0b      	ldr	r2, [pc, #44]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6713      	str	r3, [r2, #112]	@ 0x70
 800282a:	e032      	b.n	8002892 <HAL_RCC_OscConfig+0x4e6>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d111      	bne.n	8002858 <HAL_RCC_OscConfig+0x4ac>
 8002834:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a05      	ldr	r2, [pc, #20]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002840:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	4a02      	ldr	r2, [pc, #8]	@ (8002850 <HAL_RCC_OscConfig+0x4a4>)
 8002846:	f023 0304 	bic.w	r3, r3, #4
 800284a:	6713      	str	r3, [r2, #112]	@ 0x70
 800284c:	e021      	b.n	8002892 <HAL_RCC_OscConfig+0x4e6>
 800284e:	bf00      	nop
 8002850:	58024400 	.word	0x58024400
 8002854:	58024800 	.word	0x58024800
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b05      	cmp	r3, #5
 800285e:	d10c      	bne.n	800287a <HAL_RCC_OscConfig+0x4ce>
 8002860:	4b83      	ldr	r3, [pc, #524]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002864:	4a82      	ldr	r2, [pc, #520]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	6713      	str	r3, [r2, #112]	@ 0x70
 800286c:	4b80      	ldr	r3, [pc, #512]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002870:	4a7f      	ldr	r2, [pc, #508]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	@ 0x70
 8002878:	e00b      	b.n	8002892 <HAL_RCC_OscConfig+0x4e6>
 800287a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6713      	str	r3, [r2, #112]	@ 0x70
 8002886:	4b7a      	ldr	r3, [pc, #488]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288a:	4a79      	ldr	r2, [pc, #484]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 800288c:	f023 0304 	bic.w	r3, r3, #4
 8002890:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d015      	beq.n	80028c6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7fe fc5f 	bl	800115c <HAL_GetTick>
 800289e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fc5b 	bl	800115c <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e14b      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028b8:	4b6d      	ldr	r3, [pc, #436]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0ee      	beq.n	80028a2 <HAL_RCC_OscConfig+0x4f6>
 80028c4:	e014      	b.n	80028f0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c6:	f7fe fc49 	bl	800115c <HAL_GetTick>
 80028ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ce:	f7fe fc45 	bl	800115c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e135      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028e4:	4b62      	ldr	r3, [pc, #392]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1ee      	bne.n	80028ce <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 812a 	beq.w	8002b4e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002902:	2b18      	cmp	r3, #24
 8002904:	f000 80ba 	beq.w	8002a7c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	2b02      	cmp	r3, #2
 800290e:	f040 8095 	bne.w	8002a3c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002912:	4b57      	ldr	r3, [pc, #348]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a56      	ldr	r2, [pc, #344]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002918:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800291c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe fc1d 	bl	800115c <HAL_GetTick>
 8002922:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe fc19 	bl	800115c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e10b      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002938:	4b4d      	ldr	r3, [pc, #308]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002944:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002946:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002948:	4b4a      	ldr	r3, [pc, #296]	@ (8002a74 <HAL_RCC_OscConfig+0x6c8>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	430a      	orrs	r2, r1
 8002958:	4945      	ldr	r1, [pc, #276]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	628b      	str	r3, [r1, #40]	@ 0x28
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	3b01      	subs	r3, #1
 8002964:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296c:	3b01      	subs	r3, #1
 800296e:	025b      	lsls	r3, r3, #9
 8002970:	b29b      	uxth	r3, r3
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002978:	3b01      	subs	r3, #1
 800297a:	041b      	lsls	r3, r3, #16
 800297c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002986:	3b01      	subs	r3, #1
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800298e:	4938      	ldr	r1, [pc, #224]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002990:	4313      	orrs	r3, r2
 8002992:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002994:	4b36      	ldr	r3, [pc, #216]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	4a35      	ldr	r2, [pc, #212]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029a0:	4b33      	ldr	r3, [pc, #204]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029a4:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_RCC_OscConfig+0x6cc>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029ac:	00d2      	lsls	r2, r2, #3
 80029ae:	4930      	ldr	r1, [pc, #192]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	f023 020c 	bic.w	r2, r3, #12
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	492b      	ldr	r1, [pc, #172]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	f023 0202 	bic.w	r2, r3, #2
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	4927      	ldr	r1, [pc, #156]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029d8:	4b25      	ldr	r3, [pc, #148]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	4a24      	ldr	r2, [pc, #144]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e4:	4b22      	ldr	r3, [pc, #136]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	4a21      	ldr	r2, [pc, #132]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	4a1b      	ldr	r2, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a08:	4b19      	ldr	r3, [pc, #100]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a18      	ldr	r2, [pc, #96]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fba2 	bl	800115c <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fb9e 	bl	800115c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e090      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a2e:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x670>
 8002a3a:	e088      	b.n	8002b4e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0b      	ldr	r2, [pc, #44]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002a42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fb88 	bl	800115c <HAL_GetTick>
 8002a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe fb84 	bl	800115c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e076      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a62:	4b03      	ldr	r3, [pc, #12]	@ (8002a70 <HAL_RCC_OscConfig+0x6c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x6a4>
 8002a6e:	e06e      	b.n	8002b4e <HAL_RCC_OscConfig+0x7a2>
 8002a70:	58024400 	.word	0x58024400
 8002a74:	fffffc0c 	.word	0xfffffc0c
 8002a78:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a7c:	4b36      	ldr	r3, [pc, #216]	@ (8002b58 <HAL_RCC_OscConfig+0x7ac>)
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a82:	4b35      	ldr	r3, [pc, #212]	@ (8002b58 <HAL_RCC_OscConfig+0x7ac>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d031      	beq.n	8002af4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0203 	and.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d12a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d122      	bne.n	8002af4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	0a5b      	lsrs	r3, r3, #9
 8002ac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d111      	bne.n	8002af4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	0e1b      	lsrs	r3, r3, #24
 8002ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e02b      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002af8:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <HAL_RCC_OscConfig+0x7ac>)
 8002afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afc:	08db      	lsrs	r3, r3, #3
 8002afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d01f      	beq.n	8002b4e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b0e:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_RCC_OscConfig+0x7ac>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <HAL_RCC_OscConfig+0x7ac>)
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b1a:	f7fe fb1f 	bl	800115c <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b20:	bf00      	nop
 8002b22:	f7fe fb1b 	bl	800115c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d0f9      	beq.n	8002b22 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <HAL_RCC_OscConfig+0x7ac>)
 8002b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b3a:	00d2      	lsls	r2, r2, #3
 8002b3c:	4906      	ldr	r1, [pc, #24]	@ (8002b58 <HAL_RCC_OscConfig+0x7ac>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b42:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCC_OscConfig+0x7ac>)
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	4a04      	ldr	r2, [pc, #16]	@ (8002b58 <HAL_RCC_OscConfig+0x7ac>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3730      	adds	r7, #48	@ 0x30
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	ffff0007 	.word	0xffff0007

08002b60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e19c      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b8a      	ldr	r3, [pc, #552]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d910      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b87      	ldr	r3, [pc, #540]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 020f 	bic.w	r2, r3, #15
 8002b8a:	4985      	ldr	r1, [pc, #532]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b83      	ldr	r3, [pc, #524]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e184      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d908      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bc0:	4b78      	ldr	r3, [pc, #480]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	4975      	ldr	r1, [pc, #468]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d010      	beq.n	8002c00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	4b70      	ldr	r3, [pc, #448]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d908      	bls.n	8002c00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bee:	4b6d      	ldr	r3, [pc, #436]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	496a      	ldr	r1, [pc, #424]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	4b64      	ldr	r3, [pc, #400]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d908      	bls.n	8002c2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c1c:	4b61      	ldr	r3, [pc, #388]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	495e      	ldr	r1, [pc, #376]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	4b59      	ldr	r3, [pc, #356]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d908      	bls.n	8002c5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c4a:	4b56      	ldr	r3, [pc, #344]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4953      	ldr	r1, [pc, #332]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d010      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d908      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	4b4a      	ldr	r3, [pc, #296]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f023 020f 	bic.w	r2, r3, #15
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4947      	ldr	r1, [pc, #284]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d055      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c96:	4b43      	ldr	r3, [pc, #268]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4940      	ldr	r1, [pc, #256]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d121      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0f6      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cc8:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d115      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0ea      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ce0:	4b30      	ldr	r3, [pc, #192]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0de      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0d6      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d00:	4b28      	ldr	r3, [pc, #160]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f023 0207 	bic.w	r2, r3, #7
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4925      	ldr	r1, [pc, #148]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d12:	f7fe fa23 	bl	800115c <HAL_GetTick>
 8002d16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1a:	f7fe fa1f 	bl	800115c <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0be      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d30:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d1eb      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d208      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5e:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f023 020f 	bic.w	r2, r3, #15
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	490e      	ldr	r1, [pc, #56]	@ (8002da4 <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d214      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 020f 	bic.w	r2, r3, #15
 8002d86:	4906      	ldr	r1, [pc, #24]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <HAL_RCC_ClockConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e086      	b.n	8002eae <HAL_RCC_ClockConfig+0x34e>
 8002da0:	52002000 	.word	0x52002000
 8002da4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d010      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d208      	bcs.n	8002dd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	4939      	ldr	r1, [pc, #228]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	4b34      	ldr	r3, [pc, #208]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d208      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002df2:	4b31      	ldr	r3, [pc, #196]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	492e      	ldr	r1, [pc, #184]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	4b28      	ldr	r3, [pc, #160]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d208      	bcs.n	8002e32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e20:	4b25      	ldr	r3, [pc, #148]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4922      	ldr	r1, [pc, #136]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d208      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4917      	ldr	r1, [pc, #92]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e60:	f000 f834 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	4912      	ldr	r1, [pc, #72]	@ (8002ebc <HAL_RCC_ClockConfig+0x35c>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <HAL_RCC_ClockConfig+0x358>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	4a0d      	ldr	r2, [pc, #52]	@ (8002ebc <HAL_RCC_ClockConfig+0x35c>)
 8002e88:	5cd3      	ldrb	r3, [r2, r3]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <HAL_RCC_ClockConfig+0x360>)
 8002e96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e98:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <HAL_RCC_ClockConfig+0x364>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <HAL_RCC_ClockConfig+0x368>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe f910 	bl	80010c8 <HAL_InitTick>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	0800786c 	.word	0x0800786c
 8002ec0:	24000008 	.word	0x24000008
 8002ec4:	24000004 	.word	0x24000004
 8002ec8:	2400000c 	.word	0x2400000c

08002ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	@ 0x24
 8002ed0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed2:	4bb3      	ldr	r3, [pc, #716]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eda:	2b18      	cmp	r3, #24
 8002edc:	f200 8155 	bhi.w	800318a <HAL_RCC_GetSysClockFreq+0x2be>
 8002ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f4d 	.word	0x08002f4d
 8002eec:	0800318b 	.word	0x0800318b
 8002ef0:	0800318b 	.word	0x0800318b
 8002ef4:	0800318b 	.word	0x0800318b
 8002ef8:	0800318b 	.word	0x0800318b
 8002efc:	0800318b 	.word	0x0800318b
 8002f00:	0800318b 	.word	0x0800318b
 8002f04:	0800318b 	.word	0x0800318b
 8002f08:	08002f73 	.word	0x08002f73
 8002f0c:	0800318b 	.word	0x0800318b
 8002f10:	0800318b 	.word	0x0800318b
 8002f14:	0800318b 	.word	0x0800318b
 8002f18:	0800318b 	.word	0x0800318b
 8002f1c:	0800318b 	.word	0x0800318b
 8002f20:	0800318b 	.word	0x0800318b
 8002f24:	0800318b 	.word	0x0800318b
 8002f28:	08002f79 	.word	0x08002f79
 8002f2c:	0800318b 	.word	0x0800318b
 8002f30:	0800318b 	.word	0x0800318b
 8002f34:	0800318b 	.word	0x0800318b
 8002f38:	0800318b 	.word	0x0800318b
 8002f3c:	0800318b 	.word	0x0800318b
 8002f40:	0800318b 	.word	0x0800318b
 8002f44:	0800318b 	.word	0x0800318b
 8002f48:	08002f7f 	.word	0x08002f7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f4c:	4b94      	ldr	r3, [pc, #592]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f58:	4b91      	ldr	r3, [pc, #580]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	4a90      	ldr	r2, [pc, #576]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
 8002f68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f6a:	e111      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f6c:	4b8d      	ldr	r3, [pc, #564]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f6e:	61bb      	str	r3, [r7, #24]
      break;
 8002f70:	e10e      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f72:	4b8d      	ldr	r3, [pc, #564]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f74:	61bb      	str	r3, [r7, #24]
      break;
 8002f76:	e10b      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f78:	4b8c      	ldr	r3, [pc, #560]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f7a:	61bb      	str	r3, [r7, #24]
      break;
 8002f7c:	e108      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f7e:	4b88      	ldr	r3, [pc, #544]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f88:	4b85      	ldr	r3, [pc, #532]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f94:	4b82      	ldr	r3, [pc, #520]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f9e:	4b80      	ldr	r3, [pc, #512]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa2:	08db      	lsrs	r3, r3, #3
 8002fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80e1 	beq.w	8003184 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	f000 8083 	beq.w	80030d0 <HAL_RCC_GetSysClockFreq+0x204>
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	f200 80a1 	bhi.w	8003114 <HAL_RCC_GetSysClockFreq+0x248>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x114>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d056      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002fde:	e099      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d02d      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fec:	4b6c      	ldr	r3, [pc, #432]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	08db      	lsrs	r3, r3, #3
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	4a6b      	ldr	r2, [pc, #428]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	ee07 3a90 	vmov	s15, r3
 8003004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003016:	4b62      	ldr	r3, [pc, #392]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003026:	ed97 6a02 	vldr	s12, [r7, #8]
 800302a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800302e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800303a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800303e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003042:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003046:	e087      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003052:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305a:	4b51      	ldr	r3, [pc, #324]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306a:	ed97 6a02 	vldr	s12, [r7, #8]
 800306e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800307e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800308a:	e065      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003096:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80031b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800309a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309e:	4b40      	ldr	r3, [pc, #256]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ce:	e043      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80030de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e2:	4b2f      	ldr	r3, [pc, #188]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003112:	e021      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003126:	4b1e      	ldr	r3, [pc, #120]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003136:	ed97 6a02 	vldr	s12, [r7, #8]
 800313a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800313e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800314a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003156:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003158:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	0a5b      	lsrs	r3, r3, #9
 800315e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003162:	3301      	adds	r3, #1
 8003164:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	ee07 3a90 	vmov	s15, r3
 800316c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003170:	edd7 6a07 	vldr	s13, [r7, #28]
 8003174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800317c:	ee17 3a90 	vmov	r3, s15
 8003180:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003182:	e005      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
      break;
 8003188:	e002      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800318a:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800318c:	61bb      	str	r3, [r7, #24]
      break;
 800318e:	bf00      	nop
  }

  return sysclockfreq;
 8003190:	69bb      	ldr	r3, [r7, #24]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3724      	adds	r7, #36	@ 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	58024400 	.word	0x58024400
 80031a4:	03d09000 	.word	0x03d09000
 80031a8:	003d0900 	.word	0x003d0900
 80031ac:	017d7840 	.word	0x017d7840
 80031b0:	46000000 	.word	0x46000000
 80031b4:	4c742400 	.word	0x4c742400
 80031b8:	4a742400 	.word	0x4a742400
 80031bc:	4bbebc20 	.word	0x4bbebc20

080031c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031c6:	f7ff fe81 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 80031ca:	4602      	mov	r2, r0
 80031cc:	4b10      	ldr	r3, [pc, #64]	@ (8003210 <HAL_RCC_GetHCLKFreq+0x50>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	490f      	ldr	r1, [pc, #60]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x54>)
 80031d8:	5ccb      	ldrb	r3, [r1, r3]
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	fa22 f303 	lsr.w	r3, r2, r3
 80031e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <HAL_RCC_GetHCLKFreq+0x50>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	4a09      	ldr	r2, [pc, #36]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x54>)
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	4a07      	ldr	r2, [pc, #28]	@ (8003218 <HAL_RCC_GetHCLKFreq+0x58>)
 80031fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031fe:	4a07      	ldr	r2, [pc, #28]	@ (800321c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <HAL_RCC_GetHCLKFreq+0x58>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	58024400 	.word	0x58024400
 8003214:	0800786c 	.word	0x0800786c
 8003218:	24000008 	.word	0x24000008
 800321c:	24000004 	.word	0x24000004

08003220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003224:	f7ff ffcc 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4904      	ldr	r1, [pc, #16]	@ (8003248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	58024400 	.word	0x58024400
 8003248:	0800786c 	.word	0x0800786c

0800324c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003250:	f7ff ffb6 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	4904      	ldr	r1, [pc, #16]	@ (8003274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}
 8003270:	58024400 	.word	0x58024400
 8003274:	0800786c 	.word	0x0800786c

08003278 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b0c6      	sub	sp, #280	@ 0x118
 800327e:	af00      	add	r7, sp, #0
 8003280:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003284:	2300      	movs	r3, #0
 8003286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800328a:	2300      	movs	r3, #0
 800328c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800329c:	2500      	movs	r5, #0
 800329e:	ea54 0305 	orrs.w	r3, r4, r5
 80032a2:	d049      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032ae:	d02f      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032b4:	d828      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ba:	d01a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032c0:	d822      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ca:	d007      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032cc:	e01c      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ce:	4bab      	ldr	r3, [pc, #684]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d2:	4aaa      	ldr	r2, [pc, #680]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032da:	e01a      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e0:	3308      	adds	r3, #8
 80032e2:	2102      	movs	r1, #2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 fc25 	bl	8004b34 <RCCEx_PLL2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032f0:	e00f      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032f6:	3328      	adds	r3, #40	@ 0x28
 80032f8:	2102      	movs	r1, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fccc 	bl	8004c98 <RCCEx_PLL3_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003306:	e004      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003312:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800331a:	4b98      	ldr	r3, [pc, #608]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800331c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003328:	4a94      	ldr	r2, [pc, #592]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800332a:	430b      	orrs	r3, r1
 800332c:	6513      	str	r3, [r2, #80]	@ 0x50
 800332e:	e003      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003334:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003344:	f04f 0900 	mov.w	r9, #0
 8003348:	ea58 0309 	orrs.w	r3, r8, r9
 800334c:	d047      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800334e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	2b04      	cmp	r3, #4
 8003356:	d82a      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003358:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003375 	.word	0x08003375
 8003364:	08003383 	.word	0x08003383
 8003368:	08003399 	.word	0x08003399
 800336c:	080033b7 	.word	0x080033b7
 8003370:	080033b7 	.word	0x080033b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003374:	4b81      	ldr	r3, [pc, #516]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	4a80      	ldr	r2, [pc, #512]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800337a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800337e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003380:	e01a      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003386:	3308      	adds	r3, #8
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f001 fbd2 	bl	8004b34 <RCCEx_PLL2_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003396:	e00f      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800339c:	3328      	adds	r3, #40	@ 0x28
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f001 fc79 	bl	8004c98 <RCCEx_PLL3_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033ac:	e004      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033c0:	4b6e      	ldr	r3, [pc, #440]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c4:	f023 0107 	bic.w	r1, r3, #7
 80033c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	4a6b      	ldr	r2, [pc, #428]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80033d4:	e003      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80033de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80033ea:	f04f 0b00 	mov.w	fp, #0
 80033ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80033f2:	d05b      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80033f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033fc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003400:	d03b      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003402:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003406:	d834      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003408:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800340c:	d037      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800340e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003412:	d82e      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003414:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003418:	d033      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800341a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800341e:	d828      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003424:	d01a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003426:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800342a:	d822      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003430:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003434:	d007      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003436:	e01c      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003438:	4b50      	ldr	r3, [pc, #320]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	4a4f      	ldr	r2, [pc, #316]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800343e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003444:	e01e      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344a:	3308      	adds	r3, #8
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f001 fb70 	bl	8004b34 <RCCEx_PLL2_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800345a:	e013      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800345c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003460:	3328      	adds	r3, #40	@ 0x28
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f001 fc17 	bl	8004c98 <RCCEx_PLL3_Config>
 800346a:	4603      	mov	r3, r0
 800346c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003470:	e008      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003478:	e004      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800347a:	bf00      	nop
 800347c:	e002      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800348c:	4b3b      	ldr	r3, [pc, #236]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003490:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003498:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800349c:	4a37      	ldr	r2, [pc, #220]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800349e:	430b      	orrs	r3, r1
 80034a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034a2:	e003      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80034b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80034c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80034c6:	460b      	mov	r3, r1
 80034c8:	4313      	orrs	r3, r2
 80034ca:	d05d      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80034cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034d4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80034d8:	d03b      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80034da:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80034de:	d834      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034e4:	d037      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80034e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034ea:	d82e      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034f0:	d033      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80034f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034f6:	d828      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034fc:	d01a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80034fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003502:	d822      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800350c:	d007      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800350e:	e01c      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003510:	4b1a      	ldr	r3, [pc, #104]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	4a19      	ldr	r2, [pc, #100]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800351a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800351c:	e01e      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800351e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003522:	3308      	adds	r3, #8
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f001 fb04 	bl	8004b34 <RCCEx_PLL2_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003532:	e013      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003538:	3328      	adds	r3, #40	@ 0x28
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f001 fbab 	bl	8004c98 <RCCEx_PLL3_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003548:	e008      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003550:	e004      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003552:	bf00      	nop
 8003554:	e002      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003556:	bf00      	nop
 8003558:	e000      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800355a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10d      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003568:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800356c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003570:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003574:	4a01      	ldr	r2, [pc, #4]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003576:	430b      	orrs	r3, r1
 8003578:	6593      	str	r3, [r2, #88]	@ 0x58
 800357a:	e005      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800357c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003594:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800359e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4313      	orrs	r3, r2
 80035a6:	d03a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80035a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ae:	2b30      	cmp	r3, #48	@ 0x30
 80035b0:	d01f      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80035b2:	2b30      	cmp	r3, #48	@ 0x30
 80035b4:	d819      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d00c      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d815      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d019      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d111      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c6:	4baa      	ldr	r3, [pc, #680]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ca:	4aa9      	ldr	r2, [pc, #676]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80035d2:	e011      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d8:	3308      	adds	r3, #8
 80035da:	2102      	movs	r1, #2
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 faa9 	bl	8004b34 <RCCEx_PLL2_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80035e8:	e006      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035f0:	e002      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80035f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003600:	4b9b      	ldr	r3, [pc, #620]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003604:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800360c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360e:	4a98      	ldr	r2, [pc, #608]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003610:	430b      	orrs	r3, r1
 8003612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003614:	e003      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800361a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800361e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800362a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800362e:	2300      	movs	r3, #0
 8003630:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003634:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003638:	460b      	mov	r3, r1
 800363a:	4313      	orrs	r3, r2
 800363c:	d051      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800363e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003644:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003648:	d035      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800364a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800364e:	d82e      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003650:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003654:	d031      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003656:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800365a:	d828      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800365c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003660:	d01a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003666:	d822      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003670:	d007      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003672:	e01c      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003674:	4b7e      	ldr	r3, [pc, #504]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	4a7d      	ldr	r2, [pc, #500]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800367a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003680:	e01c      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003686:	3308      	adds	r3, #8
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fa52 	bl	8004b34 <RCCEx_PLL2_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003696:	e011      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800369c:	3328      	adds	r3, #40	@ 0x28
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 faf9 	bl	8004c98 <RCCEx_PLL3_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036ac:	e006      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036b4:	e002      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80036b6:	bf00      	nop
 80036b8:	e000      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80036ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	4a67      	ldr	r2, [pc, #412]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80036d8:	e003      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80036ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036f2:	2300      	movs	r3, #0
 80036f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036f8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4313      	orrs	r3, r2
 8003700:	d053      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800370c:	d033      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800370e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003712:	d82c      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003714:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003718:	d02f      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800371a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800371e:	d826      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003720:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003724:	d02b      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003726:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800372a:	d820      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800372c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003730:	d012      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003732:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003736:	d81a      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d022      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800373c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003740:	d115      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003746:	3308      	adds	r3, #8
 8003748:	2101      	movs	r1, #1
 800374a:	4618      	mov	r0, r3
 800374c:	f001 f9f2 	bl	8004b34 <RCCEx_PLL2_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003756:	e015      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800375c:	3328      	adds	r3, #40	@ 0x28
 800375e:	2101      	movs	r1, #1
 8003760:	4618      	mov	r0, r3
 8003762:	f001 fa99 	bl	8004c98 <RCCEx_PLL3_Config>
 8003766:	4603      	mov	r3, r0
 8003768:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800376c:	e00a      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003774:	e006      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003776:	bf00      	nop
 8003778:	e004      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800377a:	bf00      	nop
 800377c:	e002      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800377e:	bf00      	nop
 8003780:	e000      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003784:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800378c:	4b38      	ldr	r3, [pc, #224]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800378e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003790:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379a:	4a35      	ldr	r2, [pc, #212]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800379c:	430b      	orrs	r3, r1
 800379e:	6513      	str	r3, [r2, #80]	@ 0x50
 80037a0:	e003      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037ba:	2300      	movs	r3, #0
 80037bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80037c0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037c4:	460b      	mov	r3, r1
 80037c6:	4313      	orrs	r3, r2
 80037c8:	d058      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d6:	d033      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80037d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037dc:	d82c      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e2:	d02f      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e8:	d826      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037ee:	d02b      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80037f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037f4:	d820      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037fa:	d012      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80037fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003800:	d81a      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d022      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800380a:	d115      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800380c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003810:	3308      	adds	r3, #8
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f001 f98d 	bl	8004b34 <RCCEx_PLL2_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003820:	e015      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003826:	3328      	adds	r3, #40	@ 0x28
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f001 fa34 	bl	8004c98 <RCCEx_PLL3_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003836:	e00a      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800383e:	e006      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003840:	bf00      	nop
 8003842:	e004      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003844:	bf00      	nop
 8003846:	e002      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800384c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800384e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10e      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003856:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800385e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003862:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003866:	4a02      	ldr	r2, [pc, #8]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003868:	430b      	orrs	r3, r1
 800386a:	6593      	str	r3, [r2, #88]	@ 0x58
 800386c:	e006      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800386e:	bf00      	nop
 8003870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003878:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800387c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003892:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	d037      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800389c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038a6:	d00e      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80038a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ac:	d816      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d018      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80038b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038b6:	d111      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b8:	4bc4      	ldr	r3, [pc, #784]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038bc:	4ac3      	ldr	r2, [pc, #780]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038c4:	e00f      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ca:	3308      	adds	r3, #8
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 f930 	bl	8004b34 <RCCEx_PLL2_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038da:	e004      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038e2:	e000      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80038e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038ee:	4bb7      	ldr	r3, [pc, #732]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80038f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038fc:	4ab3      	ldr	r2, [pc, #716]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038fe:	430b      	orrs	r3, r1
 8003900:	6513      	str	r3, [r2, #80]	@ 0x50
 8003902:	e003      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003908:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800390c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003918:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800391c:	2300      	movs	r3, #0
 800391e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003922:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003926:	460b      	mov	r3, r1
 8003928:	4313      	orrs	r3, r2
 800392a:	d039      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800392c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003932:	2b03      	cmp	r3, #3
 8003934:	d81c      	bhi.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003936:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	08003979 	.word	0x08003979
 8003940:	0800394d 	.word	0x0800394d
 8003944:	0800395b 	.word	0x0800395b
 8003948:	08003979 	.word	0x08003979
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394c:	4b9f      	ldr	r3, [pc, #636]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003950:	4a9e      	ldr	r2, [pc, #632]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003956:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003958:	e00f      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800395a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800395e:	3308      	adds	r3, #8
 8003960:	2102      	movs	r1, #2
 8003962:	4618      	mov	r0, r3
 8003964:	f001 f8e6 	bl	8004b34 <RCCEx_PLL2_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800396e:	e004      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003982:	4b92      	ldr	r3, [pc, #584]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003986:	f023 0103 	bic.w	r1, r3, #3
 800398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800398e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003990:	4a8e      	ldr	r2, [pc, #568]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003992:	430b      	orrs	r3, r1
 8003994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003996:	e003      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800399c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039b0:	2300      	movs	r3, #0
 80039b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4313      	orrs	r3, r2
 80039be:	f000 8099 	beq.w	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c2:	4b83      	ldr	r3, [pc, #524]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a82      	ldr	r2, [pc, #520]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ce:	f7fd fbc5 	bl	800115c <HAL_GetTick>
 80039d2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039d6:	e00b      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7fd fbc0 	bl	800115c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b64      	cmp	r3, #100	@ 0x64
 80039e6:	d903      	bls.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039ee:	e005      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f0:	4b77      	ldr	r3, [pc, #476]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0ed      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80039fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d173      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a04:	4b71      	ldr	r3, [pc, #452]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a10:	4053      	eors	r3, r2
 8003a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d015      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a1a:	4b6c      	ldr	r3, [pc, #432]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a22:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a26:	4b69      	ldr	r3, [pc, #420]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2a:	4a68      	ldr	r2, [pc, #416]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a30:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a32:	4b66      	ldr	r3, [pc, #408]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a36:	4a65      	ldr	r2, [pc, #404]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a3c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a3e:	4a63      	ldr	r2, [pc, #396]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a44:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a52:	d118      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd fb82 	bl	800115c <HAL_GetTick>
 8003a58:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a5c:	e00d      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd fb7d 	bl	800115c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a68:	1ad2      	subs	r2, r2, r3
 8003a6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d903      	bls.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003a78:	e005      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a7a:	4b54      	ldr	r3, [pc, #336]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0eb      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003a86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d129      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a9e:	d10e      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ab0:	091a      	lsrs	r2, r3, #4
 8003ab2:	4b48      	ldr	r3, [pc, #288]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	4a45      	ldr	r2, [pc, #276]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6113      	str	r3, [r2, #16]
 8003abc:	e005      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003abe:	4b43      	ldr	r3, [pc, #268]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	4a42      	ldr	r2, [pc, #264]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ac4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ac8:	6113      	str	r3, [r2, #16]
 8003aca:	4b40      	ldr	r3, [pc, #256]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003acc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ada:	4a3c      	ldr	r2, [pc, #240]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae0:	e008      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ae6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003aea:	e003      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003af0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f002 0301 	and.w	r3, r2, #1
 8003b00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f000 808f 	beq.w	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b1c:	2b28      	cmp	r3, #40	@ 0x28
 8003b1e:	d871      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003b20:	a201      	add	r2, pc, #4	@ (adr r2, 8003b28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003c0d 	.word	0x08003c0d
 8003b2c:	08003c05 	.word	0x08003c05
 8003b30:	08003c05 	.word	0x08003c05
 8003b34:	08003c05 	.word	0x08003c05
 8003b38:	08003c05 	.word	0x08003c05
 8003b3c:	08003c05 	.word	0x08003c05
 8003b40:	08003c05 	.word	0x08003c05
 8003b44:	08003c05 	.word	0x08003c05
 8003b48:	08003bd9 	.word	0x08003bd9
 8003b4c:	08003c05 	.word	0x08003c05
 8003b50:	08003c05 	.word	0x08003c05
 8003b54:	08003c05 	.word	0x08003c05
 8003b58:	08003c05 	.word	0x08003c05
 8003b5c:	08003c05 	.word	0x08003c05
 8003b60:	08003c05 	.word	0x08003c05
 8003b64:	08003c05 	.word	0x08003c05
 8003b68:	08003bef 	.word	0x08003bef
 8003b6c:	08003c05 	.word	0x08003c05
 8003b70:	08003c05 	.word	0x08003c05
 8003b74:	08003c05 	.word	0x08003c05
 8003b78:	08003c05 	.word	0x08003c05
 8003b7c:	08003c05 	.word	0x08003c05
 8003b80:	08003c05 	.word	0x08003c05
 8003b84:	08003c05 	.word	0x08003c05
 8003b88:	08003c0d 	.word	0x08003c0d
 8003b8c:	08003c05 	.word	0x08003c05
 8003b90:	08003c05 	.word	0x08003c05
 8003b94:	08003c05 	.word	0x08003c05
 8003b98:	08003c05 	.word	0x08003c05
 8003b9c:	08003c05 	.word	0x08003c05
 8003ba0:	08003c05 	.word	0x08003c05
 8003ba4:	08003c05 	.word	0x08003c05
 8003ba8:	08003c0d 	.word	0x08003c0d
 8003bac:	08003c05 	.word	0x08003c05
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003c05 	.word	0x08003c05
 8003bb8:	08003c05 	.word	0x08003c05
 8003bbc:	08003c05 	.word	0x08003c05
 8003bc0:	08003c05 	.word	0x08003c05
 8003bc4:	08003c05 	.word	0x08003c05
 8003bc8:	08003c0d 	.word	0x08003c0d
 8003bcc:	58024400 	.word	0x58024400
 8003bd0:	58024800 	.word	0x58024800
 8003bd4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bdc:	3308      	adds	r3, #8
 8003bde:	2101      	movs	r1, #1
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 ffa7 	bl	8004b34 <RCCEx_PLL2_Config>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003bec:	e00f      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf2:	3328      	adds	r3, #40	@ 0x28
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 f84e 	bl	8004c98 <RCCEx_PLL3_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c02:	e004      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c0a:	e000      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c16:	4bbf      	ldr	r3, [pc, #764]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c24:	4abb      	ldr	r2, [pc, #748]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c26:	430b      	orrs	r3, r1
 8003c28:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c2a:	e003      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f002 0302 	and.w	r3, r2, #2
 8003c40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c4a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4313      	orrs	r3, r2
 8003c52:	d041      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d824      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c64 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003cb1 	.word	0x08003cb1
 8003c68:	08003c7d 	.word	0x08003c7d
 8003c6c:	08003c93 	.word	0x08003c93
 8003c70:	08003cb1 	.word	0x08003cb1
 8003c74:	08003cb1 	.word	0x08003cb1
 8003c78:	08003cb1 	.word	0x08003cb1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c80:	3308      	adds	r3, #8
 8003c82:	2101      	movs	r1, #1
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 ff55 	bl	8004b34 <RCCEx_PLL2_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c90:	e00f      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c96:	3328      	adds	r3, #40	@ 0x28
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fffc 	bl	8004c98 <RCCEx_PLL3_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cba:	4b96      	ldr	r3, [pc, #600]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cbe:	f023 0107 	bic.w	r1, r3, #7
 8003cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc8:	4a92      	ldr	r2, [pc, #584]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cce:	e003      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f002 0304 	and.w	r3, r2, #4
 8003ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	d044      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d00:	2b05      	cmp	r3, #5
 8003d02:	d825      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003d04:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d59 	.word	0x08003d59
 8003d10:	08003d25 	.word	0x08003d25
 8003d14:	08003d3b 	.word	0x08003d3b
 8003d18:	08003d59 	.word	0x08003d59
 8003d1c:	08003d59 	.word	0x08003d59
 8003d20:	08003d59 	.word	0x08003d59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d28:	3308      	adds	r3, #8
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 ff01 	bl	8004b34 <RCCEx_PLL2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d38:	e00f      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3e:	3328      	adds	r3, #40	@ 0x28
 8003d40:	2101      	movs	r1, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 ffa8 	bl	8004c98 <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d4e:	e004      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d56:	e000      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d62:	4b6c      	ldr	r3, [pc, #432]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d66:	f023 0107 	bic.w	r1, r3, #7
 8003d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d72:	4a68      	ldr	r2, [pc, #416]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d78:	e003      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	f002 0320 	and.w	r3, r2, #32
 8003d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d92:	2300      	movs	r3, #0
 8003d94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	d055      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dae:	d033      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db4:	d82c      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dba:	d02f      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc0:	d826      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003dc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dc6:	d02b      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003dc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dcc:	d820      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003dce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dd2:	d012      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dd8:	d81a      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d022      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003de2:	d115      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de8:	3308      	adds	r3, #8
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fea1 	bl	8004b34 <RCCEx_PLL2_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003df8:	e015      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dfe:	3328      	adds	r3, #40	@ 0x28
 8003e00:	2102      	movs	r1, #2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 ff48 	bl	8004c98 <RCCEx_PLL3_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e16:	e006      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e18:	bf00      	nop
 8003e1a:	e004      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e1c:	bf00      	nop
 8003e1e:	e002      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e20:	bf00      	nop
 8003e22:	e000      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e2e:	4b39      	ldr	r3, [pc, #228]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e3e:	4a35      	ldr	r2, [pc, #212]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e44:	e003      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e64:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	d058      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e7a:	d033      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003e7c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e80:	d82c      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e86:	d02f      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8c:	d826      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e92:	d02b      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003e94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e98:	d820      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e9e:	d012      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea4:	d81a      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d022      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eae:	d115      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fe3b 	bl	8004b34 <RCCEx_PLL2_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ec4:	e015      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eca:	3328      	adds	r3, #40	@ 0x28
 8003ecc:	2102      	movs	r1, #2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fee2 	bl	8004c98 <RCCEx_PLL3_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ee2:	e006      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ee4:	bf00      	nop
 8003ee6:	e004      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ee8:	bf00      	nop
 8003eea:	e002      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003eec:	bf00      	nop
 8003eee:	e000      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10e      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003efa:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f0a:	4a02      	ldr	r2, [pc, #8]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003f12:	bf00      	nop
 8003f14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f30:	2300      	movs	r3, #0
 8003f32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	d055      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f48:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f4c:	d033      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003f4e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f52:	d82c      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f58:	d02f      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f5e:	d826      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f60:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f64:	d02b      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003f66:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f6a:	d820      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f70:	d012      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003f72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f76:	d81a      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d022      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f80:	d115      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f86:	3308      	adds	r3, #8
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fdd2 	bl	8004b34 <RCCEx_PLL2_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f96:	e015      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f9c:	3328      	adds	r3, #40	@ 0x28
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fe79 	bl	8004c98 <RCCEx_PLL3_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fb4:	e006      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003fb6:	bf00      	nop
 8003fb8:	e004      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003fba:	bf00      	nop
 8003fbc:	e002      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003fbe:	bf00      	nop
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10b      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fcc:	4ba0      	ldr	r3, [pc, #640]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fdc:	4a9c      	ldr	r2, [pc, #624]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fe2:	e003      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fe8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f002 0308 	and.w	r3, r2, #8
 8003ff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004002:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004006:	460b      	mov	r3, r1
 8004008:	4313      	orrs	r3, r2
 800400a:	d01e      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800400c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004018:	d10c      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800401a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401e:	3328      	adds	r3, #40	@ 0x28
 8004020:	2102      	movs	r1, #2
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fe38 	bl	8004c98 <RCCEx_PLL3_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004034:	4b86      	ldr	r3, [pc, #536]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004038:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800403c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004044:	4a82      	ldr	r2, [pc, #520]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004046:	430b      	orrs	r3, r1
 8004048:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800404a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	f002 0310 	and.w	r3, r2, #16
 8004056:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004060:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004064:	460b      	mov	r3, r1
 8004066:	4313      	orrs	r3, r2
 8004068:	d01e      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800406a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004076:	d10c      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407c:	3328      	adds	r3, #40	@ 0x28
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fe09 	bl	8004c98 <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004092:	4b6f      	ldr	r3, [pc, #444]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004096:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800409a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800409e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a2:	4a6b      	ldr	r2, [pc, #428]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040b6:	2300      	movs	r3, #0
 80040b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040ba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80040be:	460b      	mov	r3, r1
 80040c0:	4313      	orrs	r3, r2
 80040c2:	d03e      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040d0:	d022      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80040d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040d6:	d81b      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e0:	d00b      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80040e2:	e015      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e8:	3308      	adds	r3, #8
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fd21 	bl	8004b34 <RCCEx_PLL2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040f8:	e00f      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fe:	3328      	adds	r3, #40	@ 0x28
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fdc8 	bl	8004c98 <RCCEx_PLL3_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800410e:	e004      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004122:	4b4b      	ldr	r3, [pc, #300]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004126:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800412a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004132:	4a47      	ldr	r2, [pc, #284]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004134:	430b      	orrs	r3, r1
 8004136:	6593      	str	r3, [r2, #88]	@ 0x58
 8004138:	e003      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800413e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800414e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004150:	2300      	movs	r3, #0
 8004152:	677b      	str	r3, [r7, #116]	@ 0x74
 8004154:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004158:	460b      	mov	r3, r1
 800415a:	4313      	orrs	r3, r2
 800415c:	d03b      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800415e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004166:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800416a:	d01f      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800416c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004170:	d818      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004176:	d003      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004178:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800417c:	d007      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800417e:	e011      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004180:	4b33      	ldr	r3, [pc, #204]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	4a32      	ldr	r2, [pc, #200]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800418a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800418c:	e00f      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800418e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004192:	3328      	adds	r3, #40	@ 0x28
 8004194:	2101      	movs	r1, #1
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fd7e 	bl	8004c98 <RCCEx_PLL3_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80041a2:	e004      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041aa:	e000      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80041ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10b      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b6:	4b26      	ldr	r3, [pc, #152]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c6:	4a22      	ldr	r2, [pc, #136]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80041cc:	e003      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80041e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041e4:	2300      	movs	r3, #0
 80041e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80041ec:	460b      	mov	r3, r1
 80041ee:	4313      	orrs	r3, r2
 80041f0:	d034      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80041f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80041fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004200:	d007      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004202:	e011      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004204:	4b12      	ldr	r3, [pc, #72]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	4a11      	ldr	r2, [pc, #68]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800420a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800420e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004210:	e00e      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004216:	3308      	adds	r3, #8
 8004218:	2102      	movs	r1, #2
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fc8a 	bl	8004b34 <RCCEx_PLL2_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004226:	e003      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800422e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004230:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10d      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004238:	4b05      	ldr	r3, [pc, #20]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800423a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800423c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004246:	4a02      	ldr	r2, [pc, #8]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004248:	430b      	orrs	r3, r1
 800424a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800424c:	e006      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800424e:	bf00      	nop
 8004250:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004254:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004258:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800425c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004268:	663b      	str	r3, [r7, #96]	@ 0x60
 800426a:	2300      	movs	r3, #0
 800426c:	667b      	str	r3, [r7, #100]	@ 0x64
 800426e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004272:	460b      	mov	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	d00c      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427c:	3328      	adds	r3, #40	@ 0x28
 800427e:	2102      	movs	r1, #2
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fd09 	bl	8004c98 <RCCEx_PLL3_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800429e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042a0:	2300      	movs	r3, #0
 80042a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042a4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80042a8:	460b      	mov	r3, r1
 80042aa:	4313      	orrs	r3, r2
 80042ac:	d036      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042b8:	d018      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80042ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042be:	d811      	bhi.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c4:	d014      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80042c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ca:	d80b      	bhi.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d011      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80042d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042d4:	d106      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d6:	4bb7      	ldr	r3, [pc, #732]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	4ab6      	ldr	r2, [pc, #728]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80042e2:	e008      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042ec:	bf00      	nop
 80042ee:	e002      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042fe:	4bad      	ldr	r3, [pc, #692]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004302:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800430c:	4aa9      	ldr	r2, [pc, #676]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800430e:	430b      	orrs	r3, r1
 8004310:	6553      	str	r3, [r2, #84]	@ 0x54
 8004312:	e003      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004318:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800431c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004328:	653b      	str	r3, [r7, #80]	@ 0x50
 800432a:	2300      	movs	r3, #0
 800432c:	657b      	str	r3, [r7, #84]	@ 0x54
 800432e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004332:	460b      	mov	r3, r1
 8004334:	4313      	orrs	r3, r2
 8004336:	d009      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004338:	4b9e      	ldr	r3, [pc, #632]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800433a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800433c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	4a9b      	ldr	r2, [pc, #620]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004348:	430b      	orrs	r3, r1
 800434a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800434c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800435a:	2300      	movs	r3, #0
 800435c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800435e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004362:	460b      	mov	r3, r1
 8004364:	4313      	orrs	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004368:	4b92      	ldr	r3, [pc, #584]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800436a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004376:	4a8f      	ldr	r2, [pc, #572]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004378:	430b      	orrs	r3, r1
 800437a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800437c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004388:	643b      	str	r3, [r7, #64]	@ 0x40
 800438a:	2300      	movs	r3, #0
 800438c:	647b      	str	r3, [r7, #68]	@ 0x44
 800438e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004392:	460b      	mov	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	d00e      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004398:	4b86      	ldr	r3, [pc, #536]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4a85      	ldr	r2, [pc, #532]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800439e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043a2:	6113      	str	r3, [r2, #16]
 80043a4:	4b83      	ldr	r3, [pc, #524]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043a6:	6919      	ldr	r1, [r3, #16]
 80043a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043b0:	4a80      	ldr	r2, [pc, #512]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80043c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043c4:	2300      	movs	r3, #0
 80043c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043d2:	4b78      	ldr	r3, [pc, #480]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80043da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e0:	4a74      	ldr	r2, [pc, #464]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043e2:	430b      	orrs	r3, r1
 80043e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80043f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80043f4:	2300      	movs	r3, #0
 80043f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043f8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80043fc:	460b      	mov	r3, r1
 80043fe:	4313      	orrs	r3, r2
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004402:	4b6c      	ldr	r3, [pc, #432]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004406:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800440a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004412:	4a68      	ldr	r2, [pc, #416]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004414:	430b      	orrs	r3, r1
 8004416:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	2100      	movs	r1, #0
 8004422:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800442a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d011      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004438:	3308      	adds	r3, #8
 800443a:	2100      	movs	r1, #0
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fb79 	bl	8004b34 <RCCEx_PLL2_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004450:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004454:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	2100      	movs	r1, #0
 8004462:	6239      	str	r1, [r7, #32]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
 800446a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800446e:	460b      	mov	r3, r1
 8004470:	4313      	orrs	r3, r2
 8004472:	d011      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004478:	3308      	adds	r3, #8
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fb59 	bl	8004b34 <RCCEx_PLL2_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004494:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	2100      	movs	r1, #0
 80044a2:	61b9      	str	r1, [r7, #24]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80044ae:	460b      	mov	r3, r1
 80044b0:	4313      	orrs	r3, r2
 80044b2:	d011      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b8:	3308      	adds	r3, #8
 80044ba:	2102      	movs	r1, #2
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fb39 	bl	8004b34 <RCCEx_PLL2_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80044c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80044d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	2100      	movs	r1, #0
 80044e2:	6139      	str	r1, [r7, #16]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	d011      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f8:	3328      	adds	r3, #40	@ 0x28
 80044fa:	2100      	movs	r1, #0
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fbcb 	bl	8004c98 <RCCEx_PLL3_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004514:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	2100      	movs	r1, #0
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800452e:	460b      	mov	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	d011      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004538:	3328      	adds	r3, #40	@ 0x28
 800453a:	2101      	movs	r1, #1
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fbab 	bl	8004c98 <RCCEx_PLL3_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004554:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	2100      	movs	r1, #0
 8004562:	6039      	str	r1, [r7, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800456e:	460b      	mov	r3, r1
 8004570:	4313      	orrs	r3, r2
 8004572:	d011      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004578:	3328      	adds	r3, #40	@ 0x28
 800457a:	2102      	movs	r1, #2
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fb8b 	bl	8004c98 <RCCEx_PLL3_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004598:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80045ac:	46bd      	mov	sp, r7
 80045ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b2:	bf00      	nop
 80045b4:	58024400 	.word	0x58024400

080045b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045bc:	f7fe fe00 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80045c0:	4602      	mov	r2, r0
 80045c2:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	091b      	lsrs	r3, r3, #4
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	4904      	ldr	r1, [pc, #16]	@ (80045e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80045ce:	5ccb      	ldrb	r3, [r1, r3]
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	58024400 	.word	0x58024400
 80045e0:	0800786c 	.word	0x0800786c

080045e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	@ 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045ec:	4ba1      	ldr	r3, [pc, #644]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80045f6:	4b9f      	ldr	r3, [pc, #636]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fa:	0b1b      	lsrs	r3, r3, #12
 80045fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004600:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004602:	4b9c      	ldr	r3, [pc, #624]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800460e:	4b99      	ldr	r3, [pc, #612]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004612:	08db      	lsrs	r3, r3, #3
 8004614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004626:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8111 	beq.w	8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b02      	cmp	r3, #2
 8004636:	f000 8083 	beq.w	8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2b02      	cmp	r3, #2
 800463e:	f200 80a1 	bhi.w	8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d056      	beq.n	80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800464e:	e099      	b.n	8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004650:	4b88      	ldr	r3, [pc, #544]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d02d      	beq.n	80046b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800465c:	4b85      	ldr	r3, [pc, #532]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	08db      	lsrs	r3, r3, #3
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	4a84      	ldr	r2, [pc, #528]	@ (8004878 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
 800466c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004686:	4b7b      	ldr	r3, [pc, #492]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004696:	ed97 6a03 	vldr	s12, [r7, #12]
 800469a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800487c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800469e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80046b6:	e087      	b.n	80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80046c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046da:	ed97 6a03 	vldr	s12, [r7, #12]
 80046de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800487c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046fa:	e065      	b.n	80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004706:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800470a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470e:	4b59      	ldr	r3, [pc, #356]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004722:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800487c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800473e:	e043      	b.n	80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800474e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004752:	4b48      	ldr	r3, [pc, #288]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004762:	ed97 6a03 	vldr	s12, [r7, #12]
 8004766:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800487c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800476a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004782:	e021      	b.n	80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004796:	4b37      	ldr	r3, [pc, #220]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800487c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80047c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047cc:	0a5b      	lsrs	r3, r3, #9
 80047ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ee:	ee17 2a90 	vmov	r2, s15
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80047f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fa:	0c1b      	lsrs	r3, r3, #16
 80047fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004808:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800480c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004810:	edd7 6a07 	vldr	s13, [r7, #28]
 8004814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481c:	ee17 2a90 	vmov	r2, s15
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004824:	4b13      	ldr	r3, [pc, #76]	@ (8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	0e1b      	lsrs	r3, r3, #24
 800482a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800483a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800483e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800484a:	ee17 2a90 	vmov	r2, s15
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004852:	e008      	b.n	8004866 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
}
 8004866:	bf00      	nop
 8004868:	3724      	adds	r7, #36	@ 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	58024400 	.word	0x58024400
 8004878:	03d09000 	.word	0x03d09000
 800487c:	46000000 	.word	0x46000000
 8004880:	4c742400 	.word	0x4c742400
 8004884:	4a742400 	.word	0x4a742400
 8004888:	4bbebc20 	.word	0x4bbebc20

0800488c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800488c:	b480      	push	{r7}
 800488e:	b089      	sub	sp, #36	@ 0x24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004894:	4ba1      	ldr	r3, [pc, #644]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800489e:	4b9f      	ldr	r3, [pc, #636]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	0d1b      	lsrs	r3, r3, #20
 80048a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048aa:	4b9c      	ldr	r3, [pc, #624]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80048b6:	4b99      	ldr	r3, [pc, #612]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ba:	08db      	lsrs	r3, r3, #3
 80048bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8111 	beq.w	8004afc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	f000 8083 	beq.w	80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	f200 80a1 	bhi.w	8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d056      	beq.n	80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80048f6:	e099      	b.n	8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048f8:	4b88      	ldr	r3, [pc, #544]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d02d      	beq.n	8004960 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004904:	4b85      	ldr	r3, [pc, #532]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	08db      	lsrs	r3, r3, #3
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	4a84      	ldr	r2, [pc, #528]	@ (8004b20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
 8004914:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492e:	4b7b      	ldr	r3, [pc, #492]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004942:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800495e:	e087      	b.n	8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800496e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004972:	4b6a      	ldr	r3, [pc, #424]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004982:	ed97 6a03 	vldr	s12, [r7, #12]
 8004986:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800498a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800498e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049a2:	e065      	b.n	8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b6:	4b59      	ldr	r3, [pc, #356]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049e6:	e043      	b.n	8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80049f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fa:	4b48      	ldr	r3, [pc, #288]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a2a:	e021      	b.n	8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3e:	4b37      	ldr	r3, [pc, #220]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004a70:	4b2a      	ldr	r3, [pc, #168]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	0a5b      	lsrs	r3, r3, #9
 8004a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a96:	ee17 2a90 	vmov	r2, s15
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	0c1b      	lsrs	r3, r3, #16
 8004aa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ab8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac4:	ee17 2a90 	vmov	r2, s15
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004acc:	4b13      	ldr	r3, [pc, #76]	@ (8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	0e1b      	lsrs	r3, r3, #24
 8004ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af2:	ee17 2a90 	vmov	r2, s15
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004afa:	e008      	b.n	8004b0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	609a      	str	r2, [r3, #8]
}
 8004b0e:	bf00      	nop
 8004b10:	3724      	adds	r7, #36	@ 0x24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	58024400 	.word	0x58024400
 8004b20:	03d09000 	.word	0x03d09000
 8004b24:	46000000 	.word	0x46000000
 8004b28:	4c742400 	.word	0x4c742400
 8004b2c:	4a742400 	.word	0x4a742400
 8004b30:	4bbebc20 	.word	0x4bbebc20

08004b34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b42:	4b53      	ldr	r3, [pc, #332]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d101      	bne.n	8004b52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e099      	b.n	8004c86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b52:	4b4f      	ldr	r3, [pc, #316]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a4e      	ldr	r2, [pc, #312]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5e:	f7fc fafd 	bl	800115c <HAL_GetTick>
 8004b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b64:	e008      	b.n	8004b78 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b66:	f7fc faf9 	bl	800115c <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e086      	b.n	8004c86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b78:	4b45      	ldr	r3, [pc, #276]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b84:	4b42      	ldr	r3, [pc, #264]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b88:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	031b      	lsls	r3, r3, #12
 8004b92:	493f      	ldr	r1, [pc, #252]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	025b      	lsls	r3, r3, #9
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	061b      	lsls	r3, r3, #24
 8004bc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bc8:	4931      	ldr	r1, [pc, #196]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bce:	4b30      	ldr	r3, [pc, #192]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	492d      	ldr	r1, [pc, #180]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004be0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be4:	f023 0220 	bic.w	r2, r3, #32
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	4928      	ldr	r1, [pc, #160]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004bf2:	4b27      	ldr	r3, [pc, #156]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf6:	4a26      	ldr	r2, [pc, #152]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004bf8:	f023 0310 	bic.w	r3, r3, #16
 8004bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bfe:	4b24      	ldr	r3, [pc, #144]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c02:	4b24      	ldr	r3, [pc, #144]	@ (8004c94 <RCCEx_PLL2_Config+0x160>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	69d2      	ldr	r2, [r2, #28]
 8004c0a:	00d2      	lsls	r2, r2, #3
 8004c0c:	4920      	ldr	r1, [pc, #128]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c12:	4b1f      	ldr	r3, [pc, #124]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	4a1e      	ldr	r2, [pc, #120]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c18:	f043 0310 	orr.w	r3, r3, #16
 8004c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c24:	4b1a      	ldr	r3, [pc, #104]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c30:	e00f      	b.n	8004c52 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d106      	bne.n	8004c46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c38:	4b15      	ldr	r3, [pc, #84]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3c:	4a14      	ldr	r2, [pc, #80]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c44:	e005      	b.n	8004c52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c46:	4b12      	ldr	r3, [pc, #72]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4a:	4a11      	ldr	r2, [pc, #68]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c52:	4b0f      	ldr	r3, [pc, #60]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a0e      	ldr	r2, [pc, #56]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5e:	f7fc fa7d 	bl	800115c <HAL_GetTick>
 8004c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c64:	e008      	b.n	8004c78 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c66:	f7fc fa79 	bl	800115c <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e006      	b.n	8004c86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c78:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <RCCEx_PLL2_Config+0x15c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	58024400 	.word	0x58024400
 8004c94:	ffff0007 	.word	0xffff0007

08004c98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ca6:	4b53      	ldr	r3, [pc, #332]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d101      	bne.n	8004cb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e099      	b.n	8004dea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cb6:	4b4f      	ldr	r3, [pc, #316]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a4e      	ldr	r2, [pc, #312]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc2:	f7fc fa4b 	bl	800115c <HAL_GetTick>
 8004cc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cc8:	e008      	b.n	8004cdc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cca:	f7fc fa47 	bl	800115c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e086      	b.n	8004dea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cdc:	4b45      	ldr	r3, [pc, #276]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ce8:	4b42      	ldr	r3, [pc, #264]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	051b      	lsls	r3, r3, #20
 8004cf6:	493f      	ldr	r1, [pc, #252]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	025b      	lsls	r3, r3, #9
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	041b      	lsls	r3, r3, #16
 8004d1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	061b      	lsls	r3, r3, #24
 8004d28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d2c:	4931      	ldr	r1, [pc, #196]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d32:	4b30      	ldr	r3, [pc, #192]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	492d      	ldr	r1, [pc, #180]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d44:	4b2b      	ldr	r3, [pc, #172]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	4928      	ldr	r1, [pc, #160]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d56:	4b27      	ldr	r3, [pc, #156]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5a:	4a26      	ldr	r2, [pc, #152]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d62:	4b24      	ldr	r3, [pc, #144]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d66:	4b24      	ldr	r3, [pc, #144]	@ (8004df8 <RCCEx_PLL3_Config+0x160>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	69d2      	ldr	r2, [r2, #28]
 8004d6e:	00d2      	lsls	r2, r2, #3
 8004d70:	4920      	ldr	r1, [pc, #128]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d76:	4b1f      	ldr	r3, [pc, #124]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d88:	4b1a      	ldr	r3, [pc, #104]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	4a19      	ldr	r2, [pc, #100]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d94:	e00f      	b.n	8004db6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d106      	bne.n	8004daa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d9c:	4b15      	ldr	r3, [pc, #84]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da0:	4a14      	ldr	r2, [pc, #80]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004da2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004da6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004da8:	e005      	b.n	8004db6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004daa:	4b12      	ldr	r3, [pc, #72]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	4a11      	ldr	r2, [pc, #68]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004db0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004db4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004db6:	4b0f      	ldr	r3, [pc, #60]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a0e      	ldr	r2, [pc, #56]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc2:	f7fc f9cb 	bl	800115c <HAL_GetTick>
 8004dc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dc8:	e008      	b.n	8004ddc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dca:	f7fc f9c7 	bl	800115c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e006      	b.n	8004dea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <RCCEx_PLL3_Config+0x15c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	58024400 	.word	0x58024400
 8004df8:	ffff0007 	.word	0xffff0007

08004dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e042      	b.n	8004e94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7fb fef5 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2224      	movs	r2, #36	@ 0x24
 8004e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0201 	bic.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f001 fb14 	bl	8006474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fca5 	bl	800579c <UART_SetConfig>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e01b      	b.n	8004e94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 fb93 	bl	80065b8 <UART_CheckIdleState>
 8004e92:	4603      	mov	r3, r0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b091      	sub	sp, #68	@ 0x44
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d178      	bne.n	8004fa6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_UART_Transmit_IT+0x24>
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e071      	b.n	8004fa8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	88fa      	ldrh	r2, [r7, #6]
 8004ed6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2221      	movs	r2, #33	@ 0x21
 8004eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ef8:	d12a      	bne.n	8004f50 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f02:	d107      	bne.n	8004f14 <HAL_UART_Transmit_IT+0x78>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a29      	ldr	r2, [pc, #164]	@ (8004fb4 <HAL_UART_Transmit_IT+0x118>)
 8004f10:	679a      	str	r2, [r3, #120]	@ 0x78
 8004f12:	e002      	b.n	8004f1a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a28      	ldr	r2, [pc, #160]	@ (8004fb8 <HAL_UART_Transmit_IT+0x11c>)
 8004f18:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3308      	adds	r3, #8
 8004f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3308      	adds	r3, #8
 8004f38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f3a:	637a      	str	r2, [r7, #52]	@ 0x34
 8004f3c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e5      	bne.n	8004f1a <HAL_UART_Transmit_IT+0x7e>
 8004f4e:	e028      	b.n	8004fa2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f58:	d107      	bne.n	8004f6a <HAL_UART_Transmit_IT+0xce>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d103      	bne.n	8004f6a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4a15      	ldr	r2, [pc, #84]	@ (8004fbc <HAL_UART_Transmit_IT+0x120>)
 8004f66:	679a      	str	r2, [r3, #120]	@ 0x78
 8004f68:	e002      	b.n	8004f70 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4a14      	ldr	r2, [pc, #80]	@ (8004fc0 <HAL_UART_Transmit_IT+0x124>)
 8004f6e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f8e:	623b      	str	r3, [r7, #32]
 8004f90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	69f9      	ldr	r1, [r7, #28]
 8004f94:	6a3a      	ldr	r2, [r7, #32]
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e6      	bne.n	8004f70 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e000      	b.n	8004fa8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004fa6:	2302      	movs	r3, #2
  }
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3744      	adds	r7, #68	@ 0x44
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	08006b33 	.word	0x08006b33
 8004fb8:	08006a53 	.word	0x08006a53
 8004fbc:	08006991 	.word	0x08006991
 8004fc0:	080068d9 	.word	0x080068d9

08004fc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b0ba      	sub	sp, #232	@ 0xe8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004fee:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004ff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d11b      	bne.n	8005038 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d015      	beq.n	8005038 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d105      	bne.n	8005024 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800501c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8393 	beq.w	8005754 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
      }
      return;
 8005036:	e38d      	b.n	8005754 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8123 	beq.w	8005288 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005042:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005046:	4b8d      	ldr	r3, [pc, #564]	@ (800527c <HAL_UART_IRQHandler+0x2b8>)
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800504e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005052:	4b8b      	ldr	r3, [pc, #556]	@ (8005280 <HAL_UART_IRQHandler+0x2bc>)
 8005054:	4013      	ands	r3, r2
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 8116 	beq.w	8005288 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d011      	beq.n	800508c <HAL_UART_IRQHandler+0xc8>
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800506c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00b      	beq.n	800508c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2201      	movs	r2, #1
 800507a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005082:	f043 0201 	orr.w	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800508c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d011      	beq.n	80050bc <HAL_UART_IRQHandler+0xf8>
 8005098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2202      	movs	r2, #2
 80050aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	f043 0204 	orr.w	r2, r3, #4
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d011      	beq.n	80050ec <HAL_UART_IRQHandler+0x128>
 80050c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00b      	beq.n	80050ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2204      	movs	r2, #4
 80050da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e2:	f043 0202 	orr.w	r2, r3, #2
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d017      	beq.n	8005128 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d105      	bne.n	8005110 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005104:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005108:	4b5c      	ldr	r3, [pc, #368]	@ (800527c <HAL_UART_IRQHandler+0x2b8>)
 800510a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00b      	beq.n	8005128 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2208      	movs	r2, #8
 8005116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511e:	f043 0208 	orr.w	r2, r3, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800512c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005130:	2b00      	cmp	r3, #0
 8005132:	d012      	beq.n	800515a <HAL_UART_IRQHandler+0x196>
 8005134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005138:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00c      	beq.n	800515a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 82f9 	beq.w	8005758 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d013      	beq.n	800519a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d105      	bne.n	800518a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800517e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ae:	2b40      	cmp	r3, #64	@ 0x40
 80051b0:	d005      	beq.n	80051be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d054      	beq.n	8005268 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f001 fb12 	bl	80067e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ce:	2b40      	cmp	r3, #64	@ 0x40
 80051d0:	d146      	bne.n	8005260 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3308      	adds	r3, #8
 80051d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3308      	adds	r3, #8
 80051fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005202:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800520a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1d9      	bne.n	80051d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005224:	2b00      	cmp	r3, #0
 8005226:	d017      	beq.n	8005258 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800522e:	4a15      	ldr	r2, [pc, #84]	@ (8005284 <HAL_UART_IRQHandler+0x2c0>)
 8005230:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005238:	4618      	mov	r0, r3
 800523a:	f7fc fc41 	bl	8001ac0 <HAL_DMA_Abort_IT>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d019      	beq.n	8005278 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800524a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005252:	4610      	mov	r0, r2
 8005254:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005256:	e00f      	b.n	8005278 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fa89 	bl	8005770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525e:	e00b      	b.n	8005278 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fa85 	bl	8005770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005266:	e007      	b.n	8005278 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fa81 	bl	8005770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005276:	e26f      	b.n	8005758 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005278:	bf00      	nop
    return;
 800527a:	e26d      	b.n	8005758 <HAL_UART_IRQHandler+0x794>
 800527c:	10000001 	.word	0x10000001
 8005280:	04000120 	.word	0x04000120
 8005284:	080068b5 	.word	0x080068b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800528c:	2b01      	cmp	r3, #1
 800528e:	f040 8203 	bne.w	8005698 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 81fc 	beq.w	8005698 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 81f5 	beq.w	8005698 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2210      	movs	r2, #16
 80052b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c0:	2b40      	cmp	r3, #64	@ 0x40
 80052c2:	f040 816d 	bne.w	80055a0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4aa4      	ldr	r2, [pc, #656]	@ (8005560 <HAL_UART_IRQHandler+0x59c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d068      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4aa1      	ldr	r2, [pc, #644]	@ (8005564 <HAL_UART_IRQHandler+0x5a0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d061      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a9f      	ldr	r2, [pc, #636]	@ (8005568 <HAL_UART_IRQHandler+0x5a4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d05a      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a9c      	ldr	r2, [pc, #624]	@ (800556c <HAL_UART_IRQHandler+0x5a8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d053      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a9a      	ldr	r2, [pc, #616]	@ (8005570 <HAL_UART_IRQHandler+0x5ac>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d04c      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a97      	ldr	r2, [pc, #604]	@ (8005574 <HAL_UART_IRQHandler+0x5b0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d045      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a95      	ldr	r2, [pc, #596]	@ (8005578 <HAL_UART_IRQHandler+0x5b4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d03e      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a92      	ldr	r2, [pc, #584]	@ (800557c <HAL_UART_IRQHandler+0x5b8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d037      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a90      	ldr	r2, [pc, #576]	@ (8005580 <HAL_UART_IRQHandler+0x5bc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d030      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a8d      	ldr	r2, [pc, #564]	@ (8005584 <HAL_UART_IRQHandler+0x5c0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d029      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a8b      	ldr	r2, [pc, #556]	@ (8005588 <HAL_UART_IRQHandler+0x5c4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d022      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a88      	ldr	r2, [pc, #544]	@ (800558c <HAL_UART_IRQHandler+0x5c8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01b      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a86      	ldr	r2, [pc, #536]	@ (8005590 <HAL_UART_IRQHandler+0x5cc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d014      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a83      	ldr	r2, [pc, #524]	@ (8005594 <HAL_UART_IRQHandler+0x5d0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00d      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a81      	ldr	r2, [pc, #516]	@ (8005598 <HAL_UART_IRQHandler+0x5d4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d006      	beq.n	80053a6 <HAL_UART_IRQHandler+0x3e2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a7e      	ldr	r2, [pc, #504]	@ (800559c <HAL_UART_IRQHandler+0x5d8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d106      	bne.n	80053b4 <HAL_UART_IRQHandler+0x3f0>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	e005      	b.n	80053c0 <HAL_UART_IRQHandler+0x3fc>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80ad 	beq.w	8005528 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053d8:	429a      	cmp	r2, r3
 80053da:	f080 80a5 	bcs.w	8005528 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f4:	f000 8087 	beq.w	8005506 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800540c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005426:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800542e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800543a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1da      	bne.n	80053f8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3308      	adds	r3, #8
 8005462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005466:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800546a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800546e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e1      	bne.n	8005442 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3308      	adds	r3, #8
 8005484:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800548e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e3      	bne.n	800547e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054d4:	f023 0310 	bic.w	r3, r3, #16
 80054d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e4      	bne.n	80054c4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005500:	4618      	mov	r0, r3
 8005502:	f7fb ffbf 	bl	8001484 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005518:	b29b      	uxth	r3, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	b29b      	uxth	r3, r3
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f92f 	bl	8005784 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005526:	e119      	b.n	800575c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800552e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005532:	429a      	cmp	r2, r3
 8005534:	f040 8112 	bne.w	800575c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005544:	f040 810a 	bne.w	800575c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f914 	bl	8005784 <HAL_UARTEx_RxEventCallback>
      return;
 800555c:	e0fe      	b.n	800575c <HAL_UART_IRQHandler+0x798>
 800555e:	bf00      	nop
 8005560:	40020010 	.word	0x40020010
 8005564:	40020028 	.word	0x40020028
 8005568:	40020040 	.word	0x40020040
 800556c:	40020058 	.word	0x40020058
 8005570:	40020070 	.word	0x40020070
 8005574:	40020088 	.word	0x40020088
 8005578:	400200a0 	.word	0x400200a0
 800557c:	400200b8 	.word	0x400200b8
 8005580:	40020410 	.word	0x40020410
 8005584:	40020428 	.word	0x40020428
 8005588:	40020440 	.word	0x40020440
 800558c:	40020458 	.word	0x40020458
 8005590:	40020470 	.word	0x40020470
 8005594:	40020488 	.word	0x40020488
 8005598:	400204a0 	.word	0x400204a0
 800559c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80cf 	beq.w	8005760 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80055c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80ca 	beq.w	8005760 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80055ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80055f0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e4      	bne.n	80055cc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	623b      	str	r3, [r7, #32]
   return(result);
 8005612:	6a3a      	ldr	r2, [r7, #32]
 8005614:	4b55      	ldr	r3, [pc, #340]	@ (800576c <HAL_UART_IRQHandler+0x7a8>)
 8005616:	4013      	ands	r3, r2
 8005618:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005626:	633a      	str	r2, [r7, #48]	@ 0x30
 8005628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800562c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e3      	bne.n	8005602 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	60fb      	str	r3, [r7, #12]
   return(result);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0310 	bic.w	r3, r3, #16
 8005662:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	69b9      	ldr	r1, [r7, #24]
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	617b      	str	r3, [r7, #20]
   return(result);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e4      	bne.n	800564e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800568a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f877 	bl	8005784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005696:	e063      	b.n	8005760 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800569c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00e      	beq.n	80056c2 <HAL_UART_IRQHandler+0x6fe>
 80056a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80056b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f001 fad9 	bl	8006c72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056c0:	e051      	b.n	8005766 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d014      	beq.n	80056f8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d105      	bne.n	80056e6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d03a      	beq.n	8005764 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	4798      	blx	r3
    }
    return;
 80056f6:	e035      	b.n	8005764 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <HAL_UART_IRQHandler+0x754>
 8005704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f001 fa83 	bl	8006c1c <UART_EndTransmit_IT>
    return;
 8005716:	e026      	b.n	8005766 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <HAL_UART_IRQHandler+0x774>
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005728:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 fab2 	bl	8006c9a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005736:	e016      	b.n	8005766 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d010      	beq.n	8005766 <HAL_UART_IRQHandler+0x7a2>
 8005744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005748:	2b00      	cmp	r3, #0
 800574a:	da0c      	bge.n	8005766 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f001 fa9a 	bl	8006c86 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005752:	e008      	b.n	8005766 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005754:	bf00      	nop
 8005756:	e006      	b.n	8005766 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005758:	bf00      	nop
 800575a:	e004      	b.n	8005766 <HAL_UART_IRQHandler+0x7a2>
      return;
 800575c:	bf00      	nop
 800575e:	e002      	b.n	8005766 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005760:	bf00      	nop
 8005762:	e000      	b.n	8005766 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005764:	bf00      	nop
  }
}
 8005766:	37e8      	adds	r7, #232	@ 0xe8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	effffffe 	.word	0xeffffffe

08005770 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800579c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a0:	b092      	sub	sp, #72	@ 0x48
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4bbe      	ldr	r3, [pc, #760]	@ (8005ac4 <UART_SetConfig+0x328>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4ab3      	ldr	r2, [pc, #716]	@ (8005ac8 <UART_SetConfig+0x32c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d004      	beq.n	8005808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005804:	4313      	orrs	r3, r2
 8005806:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	4baf      	ldr	r3, [pc, #700]	@ (8005acc <UART_SetConfig+0x330>)
 8005810:	4013      	ands	r3, r2
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005818:	430b      	orrs	r3, r1
 800581a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	f023 010f 	bic.w	r1, r3, #15
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4aa6      	ldr	r2, [pc, #664]	@ (8005ad0 <UART_SetConfig+0x334>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d177      	bne.n	800592c <UART_SetConfig+0x190>
 800583c:	4ba5      	ldr	r3, [pc, #660]	@ (8005ad4 <UART_SetConfig+0x338>)
 800583e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005840:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005844:	2b28      	cmp	r3, #40	@ 0x28
 8005846:	d86d      	bhi.n	8005924 <UART_SetConfig+0x188>
 8005848:	a201      	add	r2, pc, #4	@ (adr r2, 8005850 <UART_SetConfig+0xb4>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	080058f5 	.word	0x080058f5
 8005854:	08005925 	.word	0x08005925
 8005858:	08005925 	.word	0x08005925
 800585c:	08005925 	.word	0x08005925
 8005860:	08005925 	.word	0x08005925
 8005864:	08005925 	.word	0x08005925
 8005868:	08005925 	.word	0x08005925
 800586c:	08005925 	.word	0x08005925
 8005870:	080058fd 	.word	0x080058fd
 8005874:	08005925 	.word	0x08005925
 8005878:	08005925 	.word	0x08005925
 800587c:	08005925 	.word	0x08005925
 8005880:	08005925 	.word	0x08005925
 8005884:	08005925 	.word	0x08005925
 8005888:	08005925 	.word	0x08005925
 800588c:	08005925 	.word	0x08005925
 8005890:	08005905 	.word	0x08005905
 8005894:	08005925 	.word	0x08005925
 8005898:	08005925 	.word	0x08005925
 800589c:	08005925 	.word	0x08005925
 80058a0:	08005925 	.word	0x08005925
 80058a4:	08005925 	.word	0x08005925
 80058a8:	08005925 	.word	0x08005925
 80058ac:	08005925 	.word	0x08005925
 80058b0:	0800590d 	.word	0x0800590d
 80058b4:	08005925 	.word	0x08005925
 80058b8:	08005925 	.word	0x08005925
 80058bc:	08005925 	.word	0x08005925
 80058c0:	08005925 	.word	0x08005925
 80058c4:	08005925 	.word	0x08005925
 80058c8:	08005925 	.word	0x08005925
 80058cc:	08005925 	.word	0x08005925
 80058d0:	08005915 	.word	0x08005915
 80058d4:	08005925 	.word	0x08005925
 80058d8:	08005925 	.word	0x08005925
 80058dc:	08005925 	.word	0x08005925
 80058e0:	08005925 	.word	0x08005925
 80058e4:	08005925 	.word	0x08005925
 80058e8:	08005925 	.word	0x08005925
 80058ec:	08005925 	.word	0x08005925
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fa:	e326      	b.n	8005f4a <UART_SetConfig+0x7ae>
 80058fc:	2304      	movs	r3, #4
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005902:	e322      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005904:	2308      	movs	r3, #8
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590a:	e31e      	b.n	8005f4a <UART_SetConfig+0x7ae>
 800590c:	2310      	movs	r3, #16
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005912:	e31a      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005914:	2320      	movs	r3, #32
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591a:	e316      	b.n	8005f4a <UART_SetConfig+0x7ae>
 800591c:	2340      	movs	r3, #64	@ 0x40
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005922:	e312      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005924:	2380      	movs	r3, #128	@ 0x80
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592a:	e30e      	b.n	8005f4a <UART_SetConfig+0x7ae>
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a69      	ldr	r2, [pc, #420]	@ (8005ad8 <UART_SetConfig+0x33c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d130      	bne.n	8005998 <UART_SetConfig+0x1fc>
 8005936:	4b67      	ldr	r3, [pc, #412]	@ (8005ad4 <UART_SetConfig+0x338>)
 8005938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	2b05      	cmp	r3, #5
 8005940:	d826      	bhi.n	8005990 <UART_SetConfig+0x1f4>
 8005942:	a201      	add	r2, pc, #4	@ (adr r2, 8005948 <UART_SetConfig+0x1ac>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	08005961 	.word	0x08005961
 800594c:	08005969 	.word	0x08005969
 8005950:	08005971 	.word	0x08005971
 8005954:	08005979 	.word	0x08005979
 8005958:	08005981 	.word	0x08005981
 800595c:	08005989 	.word	0x08005989
 8005960:	2300      	movs	r3, #0
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005966:	e2f0      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005968:	2304      	movs	r3, #4
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596e:	e2ec      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005970:	2308      	movs	r3, #8
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005976:	e2e8      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005978:	2310      	movs	r3, #16
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597e:	e2e4      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005980:	2320      	movs	r3, #32
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005986:	e2e0      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005988:	2340      	movs	r3, #64	@ 0x40
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598e:	e2dc      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005990:	2380      	movs	r3, #128	@ 0x80
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005996:	e2d8      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a4f      	ldr	r2, [pc, #316]	@ (8005adc <UART_SetConfig+0x340>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d130      	bne.n	8005a04 <UART_SetConfig+0x268>
 80059a2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ad4 <UART_SetConfig+0x338>)
 80059a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	d826      	bhi.n	80059fc <UART_SetConfig+0x260>
 80059ae:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <UART_SetConfig+0x218>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059cd 	.word	0x080059cd
 80059b8:	080059d5 	.word	0x080059d5
 80059bc:	080059dd 	.word	0x080059dd
 80059c0:	080059e5 	.word	0x080059e5
 80059c4:	080059ed 	.word	0x080059ed
 80059c8:	080059f5 	.word	0x080059f5
 80059cc:	2300      	movs	r3, #0
 80059ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d2:	e2ba      	b.n	8005f4a <UART_SetConfig+0x7ae>
 80059d4:	2304      	movs	r3, #4
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059da:	e2b6      	b.n	8005f4a <UART_SetConfig+0x7ae>
 80059dc:	2308      	movs	r3, #8
 80059de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e2:	e2b2      	b.n	8005f4a <UART_SetConfig+0x7ae>
 80059e4:	2310      	movs	r3, #16
 80059e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ea:	e2ae      	b.n	8005f4a <UART_SetConfig+0x7ae>
 80059ec:	2320      	movs	r3, #32
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f2:	e2aa      	b.n	8005f4a <UART_SetConfig+0x7ae>
 80059f4:	2340      	movs	r3, #64	@ 0x40
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fa:	e2a6      	b.n	8005f4a <UART_SetConfig+0x7ae>
 80059fc:	2380      	movs	r3, #128	@ 0x80
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a02:	e2a2      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a35      	ldr	r2, [pc, #212]	@ (8005ae0 <UART_SetConfig+0x344>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d130      	bne.n	8005a70 <UART_SetConfig+0x2d4>
 8005a0e:	4b31      	ldr	r3, [pc, #196]	@ (8005ad4 <UART_SetConfig+0x338>)
 8005a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	2b05      	cmp	r3, #5
 8005a18:	d826      	bhi.n	8005a68 <UART_SetConfig+0x2cc>
 8005a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a20 <UART_SetConfig+0x284>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a39 	.word	0x08005a39
 8005a24:	08005a41 	.word	0x08005a41
 8005a28:	08005a49 	.word	0x08005a49
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a59 	.word	0x08005a59
 8005a34:	08005a61 	.word	0x08005a61
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3e:	e284      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005a40:	2304      	movs	r3, #4
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a46:	e280      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005a48:	2308      	movs	r3, #8
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4e:	e27c      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005a50:	2310      	movs	r3, #16
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a56:	e278      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005a58:	2320      	movs	r3, #32
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5e:	e274      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005a60:	2340      	movs	r3, #64	@ 0x40
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a66:	e270      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005a68:	2380      	movs	r3, #128	@ 0x80
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e26c      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae4 <UART_SetConfig+0x348>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d142      	bne.n	8005b00 <UART_SetConfig+0x364>
 8005a7a:	4b16      	ldr	r3, [pc, #88]	@ (8005ad4 <UART_SetConfig+0x338>)
 8005a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	2b05      	cmp	r3, #5
 8005a84:	d838      	bhi.n	8005af8 <UART_SetConfig+0x35c>
 8005a86:	a201      	add	r2, pc, #4	@ (adr r2, 8005a8c <UART_SetConfig+0x2f0>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005aa5 	.word	0x08005aa5
 8005a90:	08005aad 	.word	0x08005aad
 8005a94:	08005ab5 	.word	0x08005ab5
 8005a98:	08005abd 	.word	0x08005abd
 8005a9c:	08005ae9 	.word	0x08005ae9
 8005aa0:	08005af1 	.word	0x08005af1
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aaa:	e24e      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005aac:	2304      	movs	r3, #4
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e24a      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005ab4:	2308      	movs	r3, #8
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aba:	e246      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005abc:	2310      	movs	r3, #16
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e242      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005ac4:	cfff69f3 	.word	0xcfff69f3
 8005ac8:	58000c00 	.word	0x58000c00
 8005acc:	11fff4ff 	.word	0x11fff4ff
 8005ad0:	40011000 	.word	0x40011000
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	40004400 	.word	0x40004400
 8005adc:	40004800 	.word	0x40004800
 8005ae0:	40004c00 	.word	0x40004c00
 8005ae4:	40005000 	.word	0x40005000
 8005ae8:	2320      	movs	r3, #32
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aee:	e22c      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005af0:	2340      	movs	r3, #64	@ 0x40
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af6:	e228      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005af8:	2380      	movs	r3, #128	@ 0x80
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afe:	e224      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4ab1      	ldr	r2, [pc, #708]	@ (8005dcc <UART_SetConfig+0x630>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d176      	bne.n	8005bf8 <UART_SetConfig+0x45c>
 8005b0a:	4bb1      	ldr	r3, [pc, #708]	@ (8005dd0 <UART_SetConfig+0x634>)
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b12:	2b28      	cmp	r3, #40	@ 0x28
 8005b14:	d86c      	bhi.n	8005bf0 <UART_SetConfig+0x454>
 8005b16:	a201      	add	r2, pc, #4	@ (adr r2, 8005b1c <UART_SetConfig+0x380>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005bc1 	.word	0x08005bc1
 8005b20:	08005bf1 	.word	0x08005bf1
 8005b24:	08005bf1 	.word	0x08005bf1
 8005b28:	08005bf1 	.word	0x08005bf1
 8005b2c:	08005bf1 	.word	0x08005bf1
 8005b30:	08005bf1 	.word	0x08005bf1
 8005b34:	08005bf1 	.word	0x08005bf1
 8005b38:	08005bf1 	.word	0x08005bf1
 8005b3c:	08005bc9 	.word	0x08005bc9
 8005b40:	08005bf1 	.word	0x08005bf1
 8005b44:	08005bf1 	.word	0x08005bf1
 8005b48:	08005bf1 	.word	0x08005bf1
 8005b4c:	08005bf1 	.word	0x08005bf1
 8005b50:	08005bf1 	.word	0x08005bf1
 8005b54:	08005bf1 	.word	0x08005bf1
 8005b58:	08005bf1 	.word	0x08005bf1
 8005b5c:	08005bd1 	.word	0x08005bd1
 8005b60:	08005bf1 	.word	0x08005bf1
 8005b64:	08005bf1 	.word	0x08005bf1
 8005b68:	08005bf1 	.word	0x08005bf1
 8005b6c:	08005bf1 	.word	0x08005bf1
 8005b70:	08005bf1 	.word	0x08005bf1
 8005b74:	08005bf1 	.word	0x08005bf1
 8005b78:	08005bf1 	.word	0x08005bf1
 8005b7c:	08005bd9 	.word	0x08005bd9
 8005b80:	08005bf1 	.word	0x08005bf1
 8005b84:	08005bf1 	.word	0x08005bf1
 8005b88:	08005bf1 	.word	0x08005bf1
 8005b8c:	08005bf1 	.word	0x08005bf1
 8005b90:	08005bf1 	.word	0x08005bf1
 8005b94:	08005bf1 	.word	0x08005bf1
 8005b98:	08005bf1 	.word	0x08005bf1
 8005b9c:	08005be1 	.word	0x08005be1
 8005ba0:	08005bf1 	.word	0x08005bf1
 8005ba4:	08005bf1 	.word	0x08005bf1
 8005ba8:	08005bf1 	.word	0x08005bf1
 8005bac:	08005bf1 	.word	0x08005bf1
 8005bb0:	08005bf1 	.word	0x08005bf1
 8005bb4:	08005bf1 	.word	0x08005bf1
 8005bb8:	08005bf1 	.word	0x08005bf1
 8005bbc:	08005be9 	.word	0x08005be9
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc6:	e1c0      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bce:	e1bc      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd6:	e1b8      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bde:	e1b4      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005be0:	2320      	movs	r3, #32
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be6:	e1b0      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005be8:	2340      	movs	r3, #64	@ 0x40
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bee:	e1ac      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005bf0:	2380      	movs	r3, #128	@ 0x80
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf6:	e1a8      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a75      	ldr	r2, [pc, #468]	@ (8005dd4 <UART_SetConfig+0x638>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d130      	bne.n	8005c64 <UART_SetConfig+0x4c8>
 8005c02:	4b73      	ldr	r3, [pc, #460]	@ (8005dd0 <UART_SetConfig+0x634>)
 8005c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	d826      	bhi.n	8005c5c <UART_SetConfig+0x4c0>
 8005c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c14 <UART_SetConfig+0x478>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c2d 	.word	0x08005c2d
 8005c18:	08005c35 	.word	0x08005c35
 8005c1c:	08005c3d 	.word	0x08005c3d
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c4d 	.word	0x08005c4d
 8005c28:	08005c55 	.word	0x08005c55
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c32:	e18a      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005c34:	2304      	movs	r3, #4
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e186      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005c3c:	2308      	movs	r3, #8
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e182      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005c44:	2310      	movs	r3, #16
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e17e      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005c4c:	2320      	movs	r3, #32
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e17a      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005c54:	2340      	movs	r3, #64	@ 0x40
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5a:	e176      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005c5c:	2380      	movs	r3, #128	@ 0x80
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c62:	e172      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a5b      	ldr	r2, [pc, #364]	@ (8005dd8 <UART_SetConfig+0x63c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d130      	bne.n	8005cd0 <UART_SetConfig+0x534>
 8005c6e:	4b58      	ldr	r3, [pc, #352]	@ (8005dd0 <UART_SetConfig+0x634>)
 8005c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b05      	cmp	r3, #5
 8005c78:	d826      	bhi.n	8005cc8 <UART_SetConfig+0x52c>
 8005c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <UART_SetConfig+0x4e4>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c99 	.word	0x08005c99
 8005c84:	08005ca1 	.word	0x08005ca1
 8005c88:	08005ca9 	.word	0x08005ca9
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e154      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e150      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005ca8:	2308      	movs	r3, #8
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cae:	e14c      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e148      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005cb8:	2320      	movs	r3, #32
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cbe:	e144      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005cc0:	2340      	movs	r3, #64	@ 0x40
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e140      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005cc8:	2380      	movs	r3, #128	@ 0x80
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cce:	e13c      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a41      	ldr	r2, [pc, #260]	@ (8005ddc <UART_SetConfig+0x640>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f040 8082 	bne.w	8005de0 <UART_SetConfig+0x644>
 8005cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8005dd0 <UART_SetConfig+0x634>)
 8005cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ce4:	2b28      	cmp	r3, #40	@ 0x28
 8005ce6:	d86d      	bhi.n	8005dc4 <UART_SetConfig+0x628>
 8005ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <UART_SetConfig+0x554>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d95 	.word	0x08005d95
 8005cf4:	08005dc5 	.word	0x08005dc5
 8005cf8:	08005dc5 	.word	0x08005dc5
 8005cfc:	08005dc5 	.word	0x08005dc5
 8005d00:	08005dc5 	.word	0x08005dc5
 8005d04:	08005dc5 	.word	0x08005dc5
 8005d08:	08005dc5 	.word	0x08005dc5
 8005d0c:	08005dc5 	.word	0x08005dc5
 8005d10:	08005d9d 	.word	0x08005d9d
 8005d14:	08005dc5 	.word	0x08005dc5
 8005d18:	08005dc5 	.word	0x08005dc5
 8005d1c:	08005dc5 	.word	0x08005dc5
 8005d20:	08005dc5 	.word	0x08005dc5
 8005d24:	08005dc5 	.word	0x08005dc5
 8005d28:	08005dc5 	.word	0x08005dc5
 8005d2c:	08005dc5 	.word	0x08005dc5
 8005d30:	08005da5 	.word	0x08005da5
 8005d34:	08005dc5 	.word	0x08005dc5
 8005d38:	08005dc5 	.word	0x08005dc5
 8005d3c:	08005dc5 	.word	0x08005dc5
 8005d40:	08005dc5 	.word	0x08005dc5
 8005d44:	08005dc5 	.word	0x08005dc5
 8005d48:	08005dc5 	.word	0x08005dc5
 8005d4c:	08005dc5 	.word	0x08005dc5
 8005d50:	08005dad 	.word	0x08005dad
 8005d54:	08005dc5 	.word	0x08005dc5
 8005d58:	08005dc5 	.word	0x08005dc5
 8005d5c:	08005dc5 	.word	0x08005dc5
 8005d60:	08005dc5 	.word	0x08005dc5
 8005d64:	08005dc5 	.word	0x08005dc5
 8005d68:	08005dc5 	.word	0x08005dc5
 8005d6c:	08005dc5 	.word	0x08005dc5
 8005d70:	08005db5 	.word	0x08005db5
 8005d74:	08005dc5 	.word	0x08005dc5
 8005d78:	08005dc5 	.word	0x08005dc5
 8005d7c:	08005dc5 	.word	0x08005dc5
 8005d80:	08005dc5 	.word	0x08005dc5
 8005d84:	08005dc5 	.word	0x08005dc5
 8005d88:	08005dc5 	.word	0x08005dc5
 8005d8c:	08005dc5 	.word	0x08005dc5
 8005d90:	08005dbd 	.word	0x08005dbd
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9a:	e0d6      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da2:	e0d2      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005da4:	2308      	movs	r3, #8
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005daa:	e0ce      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005dac:	2310      	movs	r3, #16
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db2:	e0ca      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005db4:	2320      	movs	r3, #32
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dba:	e0c6      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005dbc:	2340      	movs	r3, #64	@ 0x40
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc2:	e0c2      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005dc4:	2380      	movs	r3, #128	@ 0x80
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e0be      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005dcc:	40011400 	.word	0x40011400
 8005dd0:	58024400 	.word	0x58024400
 8005dd4:	40007800 	.word	0x40007800
 8005dd8:	40007c00 	.word	0x40007c00
 8005ddc:	40011800 	.word	0x40011800
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4aad      	ldr	r2, [pc, #692]	@ (800609c <UART_SetConfig+0x900>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d176      	bne.n	8005ed8 <UART_SetConfig+0x73c>
 8005dea:	4bad      	ldr	r3, [pc, #692]	@ (80060a0 <UART_SetConfig+0x904>)
 8005dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005df2:	2b28      	cmp	r3, #40	@ 0x28
 8005df4:	d86c      	bhi.n	8005ed0 <UART_SetConfig+0x734>
 8005df6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dfc <UART_SetConfig+0x660>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005ea1 	.word	0x08005ea1
 8005e00:	08005ed1 	.word	0x08005ed1
 8005e04:	08005ed1 	.word	0x08005ed1
 8005e08:	08005ed1 	.word	0x08005ed1
 8005e0c:	08005ed1 	.word	0x08005ed1
 8005e10:	08005ed1 	.word	0x08005ed1
 8005e14:	08005ed1 	.word	0x08005ed1
 8005e18:	08005ed1 	.word	0x08005ed1
 8005e1c:	08005ea9 	.word	0x08005ea9
 8005e20:	08005ed1 	.word	0x08005ed1
 8005e24:	08005ed1 	.word	0x08005ed1
 8005e28:	08005ed1 	.word	0x08005ed1
 8005e2c:	08005ed1 	.word	0x08005ed1
 8005e30:	08005ed1 	.word	0x08005ed1
 8005e34:	08005ed1 	.word	0x08005ed1
 8005e38:	08005ed1 	.word	0x08005ed1
 8005e3c:	08005eb1 	.word	0x08005eb1
 8005e40:	08005ed1 	.word	0x08005ed1
 8005e44:	08005ed1 	.word	0x08005ed1
 8005e48:	08005ed1 	.word	0x08005ed1
 8005e4c:	08005ed1 	.word	0x08005ed1
 8005e50:	08005ed1 	.word	0x08005ed1
 8005e54:	08005ed1 	.word	0x08005ed1
 8005e58:	08005ed1 	.word	0x08005ed1
 8005e5c:	08005eb9 	.word	0x08005eb9
 8005e60:	08005ed1 	.word	0x08005ed1
 8005e64:	08005ed1 	.word	0x08005ed1
 8005e68:	08005ed1 	.word	0x08005ed1
 8005e6c:	08005ed1 	.word	0x08005ed1
 8005e70:	08005ed1 	.word	0x08005ed1
 8005e74:	08005ed1 	.word	0x08005ed1
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ec1 	.word	0x08005ec1
 8005e80:	08005ed1 	.word	0x08005ed1
 8005e84:	08005ed1 	.word	0x08005ed1
 8005e88:	08005ed1 	.word	0x08005ed1
 8005e8c:	08005ed1 	.word	0x08005ed1
 8005e90:	08005ed1 	.word	0x08005ed1
 8005e94:	08005ed1 	.word	0x08005ed1
 8005e98:	08005ed1 	.word	0x08005ed1
 8005e9c:	08005ec9 	.word	0x08005ec9
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e050      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e04c      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e048      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e044      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005ec0:	2320      	movs	r3, #32
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e040      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005ec8:	2340      	movs	r3, #64	@ 0x40
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ece:	e03c      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005ed0:	2380      	movs	r3, #128	@ 0x80
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e038      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a71      	ldr	r2, [pc, #452]	@ (80060a4 <UART_SetConfig+0x908>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d130      	bne.n	8005f44 <UART_SetConfig+0x7a8>
 8005ee2:	4b6f      	ldr	r3, [pc, #444]	@ (80060a0 <UART_SetConfig+0x904>)
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d826      	bhi.n	8005f3c <UART_SetConfig+0x7a0>
 8005eee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <UART_SetConfig+0x758>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f0d 	.word	0x08005f0d
 8005ef8:	08005f15 	.word	0x08005f15
 8005efc:	08005f1d 	.word	0x08005f1d
 8005f00:	08005f25 	.word	0x08005f25
 8005f04:	08005f2d 	.word	0x08005f2d
 8005f08:	08005f35 	.word	0x08005f35
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e01a      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005f14:	2304      	movs	r3, #4
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e016      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e012      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005f24:	2310      	movs	r3, #16
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e00e      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005f2c:	2320      	movs	r3, #32
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e00a      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005f34:	2340      	movs	r3, #64	@ 0x40
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e006      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005f3c:	2380      	movs	r3, #128	@ 0x80
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e002      	b.n	8005f4a <UART_SetConfig+0x7ae>
 8005f44:	2380      	movs	r3, #128	@ 0x80
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a55      	ldr	r2, [pc, #340]	@ (80060a4 <UART_SetConfig+0x908>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	f040 80f8 	bne.w	8006146 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	dc46      	bgt.n	8005fec <UART_SetConfig+0x850>
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	db75      	blt.n	800604e <UART_SetConfig+0x8b2>
 8005f62:	3b02      	subs	r3, #2
 8005f64:	2b1e      	cmp	r3, #30
 8005f66:	d872      	bhi.n	800604e <UART_SetConfig+0x8b2>
 8005f68:	a201      	add	r2, pc, #4	@ (adr r2, 8005f70 <UART_SetConfig+0x7d4>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005ff3 	.word	0x08005ff3
 8005f74:	0800604f 	.word	0x0800604f
 8005f78:	08005ffb 	.word	0x08005ffb
 8005f7c:	0800604f 	.word	0x0800604f
 8005f80:	0800604f 	.word	0x0800604f
 8005f84:	0800604f 	.word	0x0800604f
 8005f88:	0800600b 	.word	0x0800600b
 8005f8c:	0800604f 	.word	0x0800604f
 8005f90:	0800604f 	.word	0x0800604f
 8005f94:	0800604f 	.word	0x0800604f
 8005f98:	0800604f 	.word	0x0800604f
 8005f9c:	0800604f 	.word	0x0800604f
 8005fa0:	0800604f 	.word	0x0800604f
 8005fa4:	0800604f 	.word	0x0800604f
 8005fa8:	0800601b 	.word	0x0800601b
 8005fac:	0800604f 	.word	0x0800604f
 8005fb0:	0800604f 	.word	0x0800604f
 8005fb4:	0800604f 	.word	0x0800604f
 8005fb8:	0800604f 	.word	0x0800604f
 8005fbc:	0800604f 	.word	0x0800604f
 8005fc0:	0800604f 	.word	0x0800604f
 8005fc4:	0800604f 	.word	0x0800604f
 8005fc8:	0800604f 	.word	0x0800604f
 8005fcc:	0800604f 	.word	0x0800604f
 8005fd0:	0800604f 	.word	0x0800604f
 8005fd4:	0800604f 	.word	0x0800604f
 8005fd8:	0800604f 	.word	0x0800604f
 8005fdc:	0800604f 	.word	0x0800604f
 8005fe0:	0800604f 	.word	0x0800604f
 8005fe4:	0800604f 	.word	0x0800604f
 8005fe8:	08006041 	.word	0x08006041
 8005fec:	2b40      	cmp	r3, #64	@ 0x40
 8005fee:	d02a      	beq.n	8006046 <UART_SetConfig+0x8aa>
 8005ff0:	e02d      	b.n	800604e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ff2:	f7fe fae1 	bl	80045b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ff6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ff8:	e02f      	b.n	800605a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe faf0 	bl	80045e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006008:	e027      	b.n	800605a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800600a:	f107 0318 	add.w	r3, r7, #24
 800600e:	4618      	mov	r0, r3
 8006010:	f7fe fc3c 	bl	800488c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006018:	e01f      	b.n	800605a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800601a:	4b21      	ldr	r3, [pc, #132]	@ (80060a0 <UART_SetConfig+0x904>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006026:	4b1e      	ldr	r3, [pc, #120]	@ (80060a0 <UART_SetConfig+0x904>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	08db      	lsrs	r3, r3, #3
 800602c:	f003 0303 	and.w	r3, r3, #3
 8006030:	4a1d      	ldr	r2, [pc, #116]	@ (80060a8 <UART_SetConfig+0x90c>)
 8006032:	fa22 f303 	lsr.w	r3, r2, r3
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006038:	e00f      	b.n	800605a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800603a:	4b1b      	ldr	r3, [pc, #108]	@ (80060a8 <UART_SetConfig+0x90c>)
 800603c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800603e:	e00c      	b.n	800605a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006040:	4b1a      	ldr	r3, [pc, #104]	@ (80060ac <UART_SetConfig+0x910>)
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006044:	e009      	b.n	800605a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800604a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800604c:	e005      	b.n	800605a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006058:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800605a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 81ee 	beq.w	800643e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006066:	4a12      	ldr	r2, [pc, #72]	@ (80060b0 <UART_SetConfig+0x914>)
 8006068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800606c:	461a      	mov	r2, r3
 800606e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006070:	fbb3 f3f2 	udiv	r3, r3, r2
 8006074:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	4613      	mov	r3, r2
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	4413      	add	r3, r2
 8006080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006082:	429a      	cmp	r2, r3
 8006084:	d305      	bcc.n	8006092 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800608c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608e:	429a      	cmp	r2, r3
 8006090:	d910      	bls.n	80060b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006098:	e1d1      	b.n	800643e <UART_SetConfig+0xca2>
 800609a:	bf00      	nop
 800609c:	40011c00 	.word	0x40011c00
 80060a0:	58024400 	.word	0x58024400
 80060a4:	58000c00 	.word	0x58000c00
 80060a8:	03d09000 	.word	0x03d09000
 80060ac:	003d0900 	.word	0x003d0900
 80060b0:	0800787c 	.word	0x0800787c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b6:	2200      	movs	r2, #0
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	60fa      	str	r2, [r7, #12]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	4ac0      	ldr	r2, [pc, #768]	@ (80063c4 <UART_SetConfig+0xc28>)
 80060c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2200      	movs	r2, #0
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060d6:	f7fa f973 	bl	80003c0 <__aeabi_uldivmod>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4610      	mov	r0, r2
 80060e0:	4619      	mov	r1, r3
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	020b      	lsls	r3, r1, #8
 80060ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060f0:	0202      	lsls	r2, r0, #8
 80060f2:	6979      	ldr	r1, [r7, #20]
 80060f4:	6849      	ldr	r1, [r1, #4]
 80060f6:	0849      	lsrs	r1, r1, #1
 80060f8:	2000      	movs	r0, #0
 80060fa:	460c      	mov	r4, r1
 80060fc:	4605      	mov	r5, r0
 80060fe:	eb12 0804 	adds.w	r8, r2, r4
 8006102:	eb43 0905 	adc.w	r9, r3, r5
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	469a      	mov	sl, r3
 800610e:	4693      	mov	fp, r2
 8006110:	4652      	mov	r2, sl
 8006112:	465b      	mov	r3, fp
 8006114:	4640      	mov	r0, r8
 8006116:	4649      	mov	r1, r9
 8006118:	f7fa f952 	bl	80003c0 <__aeabi_uldivmod>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4613      	mov	r3, r2
 8006122:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800612a:	d308      	bcc.n	800613e <UART_SetConfig+0x9a2>
 800612c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006132:	d204      	bcs.n	800613e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800613a:	60da      	str	r2, [r3, #12]
 800613c:	e17f      	b.n	800643e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006144:	e17b      	b.n	800643e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800614e:	f040 80bd 	bne.w	80062cc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006152:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006156:	2b20      	cmp	r3, #32
 8006158:	dc48      	bgt.n	80061ec <UART_SetConfig+0xa50>
 800615a:	2b00      	cmp	r3, #0
 800615c:	db7b      	blt.n	8006256 <UART_SetConfig+0xaba>
 800615e:	2b20      	cmp	r3, #32
 8006160:	d879      	bhi.n	8006256 <UART_SetConfig+0xaba>
 8006162:	a201      	add	r2, pc, #4	@ (adr r2, 8006168 <UART_SetConfig+0x9cc>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	080061f3 	.word	0x080061f3
 800616c:	080061fb 	.word	0x080061fb
 8006170:	08006257 	.word	0x08006257
 8006174:	08006257 	.word	0x08006257
 8006178:	08006203 	.word	0x08006203
 800617c:	08006257 	.word	0x08006257
 8006180:	08006257 	.word	0x08006257
 8006184:	08006257 	.word	0x08006257
 8006188:	08006213 	.word	0x08006213
 800618c:	08006257 	.word	0x08006257
 8006190:	08006257 	.word	0x08006257
 8006194:	08006257 	.word	0x08006257
 8006198:	08006257 	.word	0x08006257
 800619c:	08006257 	.word	0x08006257
 80061a0:	08006257 	.word	0x08006257
 80061a4:	08006257 	.word	0x08006257
 80061a8:	08006223 	.word	0x08006223
 80061ac:	08006257 	.word	0x08006257
 80061b0:	08006257 	.word	0x08006257
 80061b4:	08006257 	.word	0x08006257
 80061b8:	08006257 	.word	0x08006257
 80061bc:	08006257 	.word	0x08006257
 80061c0:	08006257 	.word	0x08006257
 80061c4:	08006257 	.word	0x08006257
 80061c8:	08006257 	.word	0x08006257
 80061cc:	08006257 	.word	0x08006257
 80061d0:	08006257 	.word	0x08006257
 80061d4:	08006257 	.word	0x08006257
 80061d8:	08006257 	.word	0x08006257
 80061dc:	08006257 	.word	0x08006257
 80061e0:	08006257 	.word	0x08006257
 80061e4:	08006257 	.word	0x08006257
 80061e8:	08006249 	.word	0x08006249
 80061ec:	2b40      	cmp	r3, #64	@ 0x40
 80061ee:	d02e      	beq.n	800624e <UART_SetConfig+0xab2>
 80061f0:	e031      	b.n	8006256 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f2:	f7fd f815 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 80061f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061f8:	e033      	b.n	8006262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061fa:	f7fd f827 	bl	800324c <HAL_RCC_GetPCLK2Freq>
 80061fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006200:	e02f      	b.n	8006262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe f9ec 	bl	80045e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800620c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006210:	e027      	b.n	8006262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006212:	f107 0318 	add.w	r3, r7, #24
 8006216:	4618      	mov	r0, r3
 8006218:	f7fe fb38 	bl	800488c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006220:	e01f      	b.n	8006262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006222:	4b69      	ldr	r3, [pc, #420]	@ (80063c8 <UART_SetConfig+0xc2c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800622e:	4b66      	ldr	r3, [pc, #408]	@ (80063c8 <UART_SetConfig+0xc2c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	08db      	lsrs	r3, r3, #3
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	4a64      	ldr	r2, [pc, #400]	@ (80063cc <UART_SetConfig+0xc30>)
 800623a:	fa22 f303 	lsr.w	r3, r2, r3
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006240:	e00f      	b.n	8006262 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006242:	4b62      	ldr	r3, [pc, #392]	@ (80063cc <UART_SetConfig+0xc30>)
 8006244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006246:	e00c      	b.n	8006262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006248:	4b61      	ldr	r3, [pc, #388]	@ (80063d0 <UART_SetConfig+0xc34>)
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800624c:	e009      	b.n	8006262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006254:	e005      	b.n	8006262 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80ea 	beq.w	800643e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	4a55      	ldr	r2, [pc, #340]	@ (80063c4 <UART_SetConfig+0xc28>)
 8006270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006274:	461a      	mov	r2, r3
 8006276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006278:	fbb3 f3f2 	udiv	r3, r3, r2
 800627c:	005a      	lsls	r2, r3, #1
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	085b      	lsrs	r3, r3, #1
 8006284:	441a      	add	r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	fbb2 f3f3 	udiv	r3, r2, r3
 800628e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006292:	2b0f      	cmp	r3, #15
 8006294:	d916      	bls.n	80062c4 <UART_SetConfig+0xb28>
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800629c:	d212      	bcs.n	80062c4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800629e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f023 030f 	bic.w	r3, r3, #15
 80062a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062b6:	4313      	orrs	r3, r2
 80062b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80062c0:	60da      	str	r2, [r3, #12]
 80062c2:	e0bc      	b.n	800643e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062ca:	e0b8      	b.n	800643e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	dc4b      	bgt.n	800636c <UART_SetConfig+0xbd0>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f2c0 8087 	blt.w	80063e8 <UART_SetConfig+0xc4c>
 80062da:	2b20      	cmp	r3, #32
 80062dc:	f200 8084 	bhi.w	80063e8 <UART_SetConfig+0xc4c>
 80062e0:	a201      	add	r2, pc, #4	@ (adr r2, 80062e8 <UART_SetConfig+0xb4c>)
 80062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e6:	bf00      	nop
 80062e8:	08006373 	.word	0x08006373
 80062ec:	0800637b 	.word	0x0800637b
 80062f0:	080063e9 	.word	0x080063e9
 80062f4:	080063e9 	.word	0x080063e9
 80062f8:	08006383 	.word	0x08006383
 80062fc:	080063e9 	.word	0x080063e9
 8006300:	080063e9 	.word	0x080063e9
 8006304:	080063e9 	.word	0x080063e9
 8006308:	08006393 	.word	0x08006393
 800630c:	080063e9 	.word	0x080063e9
 8006310:	080063e9 	.word	0x080063e9
 8006314:	080063e9 	.word	0x080063e9
 8006318:	080063e9 	.word	0x080063e9
 800631c:	080063e9 	.word	0x080063e9
 8006320:	080063e9 	.word	0x080063e9
 8006324:	080063e9 	.word	0x080063e9
 8006328:	080063a3 	.word	0x080063a3
 800632c:	080063e9 	.word	0x080063e9
 8006330:	080063e9 	.word	0x080063e9
 8006334:	080063e9 	.word	0x080063e9
 8006338:	080063e9 	.word	0x080063e9
 800633c:	080063e9 	.word	0x080063e9
 8006340:	080063e9 	.word	0x080063e9
 8006344:	080063e9 	.word	0x080063e9
 8006348:	080063e9 	.word	0x080063e9
 800634c:	080063e9 	.word	0x080063e9
 8006350:	080063e9 	.word	0x080063e9
 8006354:	080063e9 	.word	0x080063e9
 8006358:	080063e9 	.word	0x080063e9
 800635c:	080063e9 	.word	0x080063e9
 8006360:	080063e9 	.word	0x080063e9
 8006364:	080063e9 	.word	0x080063e9
 8006368:	080063db 	.word	0x080063db
 800636c:	2b40      	cmp	r3, #64	@ 0x40
 800636e:	d037      	beq.n	80063e0 <UART_SetConfig+0xc44>
 8006370:	e03a      	b.n	80063e8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006372:	f7fc ff55 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8006376:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006378:	e03c      	b.n	80063f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800637a:	f7fc ff67 	bl	800324c <HAL_RCC_GetPCLK2Freq>
 800637e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006380:	e038      	b.n	80063f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe f92c 	bl	80045e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800638c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006390:	e030      	b.n	80063f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006392:	f107 0318 	add.w	r3, r7, #24
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fa78 	bl	800488c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063a0:	e028      	b.n	80063f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063a2:	4b09      	ldr	r3, [pc, #36]	@ (80063c8 <UART_SetConfig+0xc2c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d012      	beq.n	80063d4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063ae:	4b06      	ldr	r3, [pc, #24]	@ (80063c8 <UART_SetConfig+0xc2c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	08db      	lsrs	r3, r3, #3
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	4a04      	ldr	r2, [pc, #16]	@ (80063cc <UART_SetConfig+0xc30>)
 80063ba:	fa22 f303 	lsr.w	r3, r2, r3
 80063be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063c0:	e018      	b.n	80063f4 <UART_SetConfig+0xc58>
 80063c2:	bf00      	nop
 80063c4:	0800787c 	.word	0x0800787c
 80063c8:	58024400 	.word	0x58024400
 80063cc:	03d09000 	.word	0x03d09000
 80063d0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80063d4:	4b24      	ldr	r3, [pc, #144]	@ (8006468 <UART_SetConfig+0xccc>)
 80063d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d8:	e00c      	b.n	80063f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063da:	4b24      	ldr	r3, [pc, #144]	@ (800646c <UART_SetConfig+0xcd0>)
 80063dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063de:	e009      	b.n	80063f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e6:	e005      	b.n	80063f4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063f2:	bf00      	nop
    }

    if (pclk != 0U)
 80063f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d021      	beq.n	800643e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006470 <UART_SetConfig+0xcd4>)
 8006400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006404:	461a      	mov	r2, r3
 8006406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006408:	fbb3 f2f2 	udiv	r2, r3, r2
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	085b      	lsrs	r3, r3, #1
 8006412:	441a      	add	r2, r3
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800641e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006420:	2b0f      	cmp	r3, #15
 8006422:	d909      	bls.n	8006438 <UART_SetConfig+0xc9c>
 8006424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800642a:	d205      	bcs.n	8006438 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800642c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642e:	b29a      	uxth	r2, r3
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	e002      	b.n	800643e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2201      	movs	r2, #1
 8006442:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2201      	movs	r2, #1
 800644a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2200      	movs	r2, #0
 8006452:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2200      	movs	r2, #0
 8006458:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800645a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800645e:	4618      	mov	r0, r3
 8006460:	3748      	adds	r7, #72	@ 0x48
 8006462:	46bd      	mov	sp, r7
 8006464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006468:	03d09000 	.word	0x03d09000
 800646c:	003d0900 	.word	0x003d0900
 8006470:	0800787c 	.word	0x0800787c

08006474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01a      	beq.n	800658a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006572:	d10a      	bne.n	800658a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	605a      	str	r2, [r3, #4]
  }
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b098      	sub	sp, #96	@ 0x60
 80065bc:	af02      	add	r7, sp, #8
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065c8:	f7fa fdc8 	bl	800115c <HAL_GetTick>
 80065cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d12f      	bne.n	800663c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e4:	2200      	movs	r2, #0
 80065e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f88e 	bl	800670c <UART_WaitOnFlagUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d022      	beq.n	800663c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800660a:	653b      	str	r3, [r7, #80]	@ 0x50
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006614:	647b      	str	r3, [r7, #68]	@ 0x44
 8006616:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800661a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e6      	bne.n	80065f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e063      	b.n	8006704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b04      	cmp	r3, #4
 8006648:	d149      	bne.n	80066de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800664a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006652:	2200      	movs	r2, #0
 8006654:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f857 	bl	800670c <UART_WaitOnFlagUntilTimeout>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d03c      	beq.n	80066de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	623b      	str	r3, [r7, #32]
   return(result);
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006682:	633b      	str	r3, [r7, #48]	@ 0x30
 8006684:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e6      	bne.n	8006664 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066b6:	61fa      	str	r2, [r7, #28]
 80066b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	69b9      	ldr	r1, [r7, #24]
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	617b      	str	r3, [r7, #20]
   return(result);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e5      	bne.n	8006696 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e012      	b.n	8006704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3758      	adds	r7, #88	@ 0x58
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	4613      	mov	r3, r2
 800671a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671c:	e04f      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d04b      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006726:	f7fa fd19 	bl	800115c <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <UART_WaitOnFlagUntilTimeout+0x30>
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e04e      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	d037      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b80      	cmp	r3, #128	@ 0x80
 8006752:	d034      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b40      	cmp	r3, #64	@ 0x40
 8006758:	d031      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b08      	cmp	r3, #8
 8006766:	d110      	bne.n	800678a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2208      	movs	r2, #8
 800676e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f839 	bl	80067e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2208      	movs	r2, #8
 800677a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e029      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006798:	d111      	bne.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 f81f 	bl	80067e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e00f      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69da      	ldr	r2, [r3, #28]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4013      	ands	r3, r2
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	bf0c      	ite	eq
 80067ce:	2301      	moveq	r3, #1
 80067d0:	2300      	movne	r3, #0
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	461a      	mov	r2, r3
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d0a0      	beq.n	800671e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b095      	sub	sp, #84	@ 0x54
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800680e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006810:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e6      	bne.n	80067f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	61fb      	str	r3, [r7, #28]
   return(result);
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	4b1e      	ldr	r3, [pc, #120]	@ (80068b0 <UART_EndRxTransfer+0xc8>)
 8006836:	4013      	ands	r3, r2
 8006838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006844:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800685a:	2b01      	cmp	r3, #1
 800685c:	d118      	bne.n	8006890 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	60bb      	str	r3, [r7, #8]
   return(result);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f023 0310 	bic.w	r3, r3, #16
 8006872:	647b      	str	r3, [r7, #68]	@ 0x44
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800687c:	61bb      	str	r3, [r7, #24]
 800687e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6979      	ldr	r1, [r7, #20]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	613b      	str	r3, [r7, #16]
   return(result);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e6      	bne.n	800685e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80068a4:	bf00      	nop
 80068a6:	3754      	adds	r7, #84	@ 0x54
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	effffffe 	.word	0xeffffffe

080068b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7fe ff50 	bl	8005770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068d8:	b480      	push	{r7}
 80068da:	b08f      	sub	sp, #60	@ 0x3c
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e6:	2b21      	cmp	r3, #33	@ 0x21
 80068e8:	d14c      	bne.n	8006984 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d132      	bne.n	800695c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	61fb      	str	r3, [r7, #28]
   return(result);
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800690a:	637b      	str	r3, [r7, #52]	@ 0x34
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006916:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800691a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e6      	bne.n	80068f6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	60bb      	str	r3, [r7, #8]
   return(result);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800693c:	633b      	str	r3, [r7, #48]	@ 0x30
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6979      	ldr	r1, [r7, #20]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	613b      	str	r3, [r7, #16]
   return(result);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800695a:	e013      	b.n	8006984 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006960:	781a      	ldrb	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006978:	b29b      	uxth	r3, r3
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006984:	bf00      	nop
 8006986:	373c      	adds	r7, #60	@ 0x3c
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006990:	b480      	push	{r7}
 8006992:	b091      	sub	sp, #68	@ 0x44
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800699e:	2b21      	cmp	r3, #33	@ 0x21
 80069a0:	d151      	bne.n	8006a46 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d132      	bne.n	8006a14 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	623b      	str	r3, [r7, #32]
   return(result);
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80069ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e6      	bne.n	80069ae <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	69b9      	ldr	r1, [r7, #24]
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e6      	bne.n	80069e0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006a12:	e018      	b.n	8006a46 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a28:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a2e:	1c9a      	adds	r2, r3, #2
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006a46:	bf00      	nop
 8006a48:	3744      	adds	r7, #68	@ 0x44
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b091      	sub	sp, #68	@ 0x44
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a60:	2b21      	cmp	r3, #33	@ 0x21
 8006a62:	d160      	bne.n	8006b26 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a6a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006a6c:	e057      	b.n	8006b1e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d133      	bne.n	8006ae2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	623b      	str	r3, [r7, #32]
   return(result);
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e5      	bne.n	8006a7a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006acc:	61fb      	str	r3, [r7, #28]
 8006ace:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	69b9      	ldr	r1, [r7, #24]
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e6      	bne.n	8006aae <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006ae0:	e021      	b.n	8006b26 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d013      	beq.n	8006b18 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af4:	781a      	ldrb	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006b18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006b1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1a4      	bne.n	8006a6e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006b24:	e7ff      	b.n	8006b26 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8006b26:	bf00      	nop
 8006b28:	3744      	adds	r7, #68	@ 0x44
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b091      	sub	sp, #68	@ 0x44
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b40:	2b21      	cmp	r3, #33	@ 0x21
 8006b42:	d165      	bne.n	8006c10 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b4a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006b4c:	e05c      	b.n	8006c08 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d133      	bne.n	8006bc2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e5      	bne.n	8006b5a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ba2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	61bb      	str	r3, [r7, #24]
 8006bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6979      	ldr	r1, [r7, #20]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e6      	bne.n	8006b8e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006bc0:	e026      	b.n	8006c10 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d018      	beq.n	8006c02 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bea:	1c9a      	adds	r2, r3, #2
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006c02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006c04:	3b01      	subs	r3, #1
 8006c06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006c08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d19f      	bne.n	8006b4e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006c0e:	e7ff      	b.n	8006c10 <UART_TxISR_16BIT_FIFOEN+0xde>
 8006c10:	bf00      	nop
 8006c12:	3744      	adds	r7, #68	@ 0x44
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	6979      	ldr	r1, [r7, #20]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e6      	bne.n	8006c24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7f9 fd41 	bl	80006ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c6a:	bf00      	nop
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e027      	b.n	8006d14 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2224      	movs	r2, #36	@ 0x24
 8006cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006cf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e02d      	b.n	8006d94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2224      	movs	r2, #36	@ 0x24
 8006d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f84f 	bl	8006e18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e02d      	b.n	8006e10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2224      	movs	r2, #36	@ 0x24
 8006dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0201 	bic.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f811 	bl	8006e18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d108      	bne.n	8006e3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e38:	e031      	b.n	8006e9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e3a:	2310      	movs	r3, #16
 8006e3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e3e:	2310      	movs	r3, #16
 8006e40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	0e5b      	lsrs	r3, r3, #25
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	0f5b      	lsrs	r3, r3, #29
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	7b3a      	ldrb	r2, [r7, #12]
 8006e66:	4911      	ldr	r1, [pc, #68]	@ (8006eac <UARTEx_SetNbDataToProcess+0x94>)
 8006e68:	5c8a      	ldrb	r2, [r1, r2]
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e6e:	7b3a      	ldrb	r2, [r7, #12]
 8006e70:	490f      	ldr	r1, [pc, #60]	@ (8006eb0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e74:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	7b7a      	ldrb	r2, [r7, #13]
 8006e84:	4909      	ldr	r1, [pc, #36]	@ (8006eac <UARTEx_SetNbDataToProcess+0x94>)
 8006e86:	5c8a      	ldrb	r2, [r1, r2]
 8006e88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e8c:	7b7a      	ldrb	r2, [r7, #13]
 8006e8e:	4908      	ldr	r1, [pc, #32]	@ (8006eb0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e92:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e9e:	bf00      	nop
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	08007894 	.word	0x08007894
 8006eb0:	0800789c 	.word	0x0800789c

08006eb4 <sniprintf>:
 8006eb4:	b40c      	push	{r2, r3}
 8006eb6:	b530      	push	{r4, r5, lr}
 8006eb8:	4b18      	ldr	r3, [pc, #96]	@ (8006f1c <sniprintf+0x68>)
 8006eba:	1e0c      	subs	r4, r1, #0
 8006ebc:	681d      	ldr	r5, [r3, #0]
 8006ebe:	b09d      	sub	sp, #116	@ 0x74
 8006ec0:	da08      	bge.n	8006ed4 <sniprintf+0x20>
 8006ec2:	238b      	movs	r3, #139	@ 0x8b
 8006ec4:	602b      	str	r3, [r5, #0]
 8006ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eca:	b01d      	add	sp, #116	@ 0x74
 8006ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ed0:	b002      	add	sp, #8
 8006ed2:	4770      	bx	lr
 8006ed4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ed8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006ee2:	bf14      	ite	ne
 8006ee4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ee8:	4623      	moveq	r3, r4
 8006eea:	9304      	str	r3, [sp, #16]
 8006eec:	9307      	str	r3, [sp, #28]
 8006eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ef2:	9002      	str	r0, [sp, #8]
 8006ef4:	9006      	str	r0, [sp, #24]
 8006ef6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006efa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006efc:	ab21      	add	r3, sp, #132	@ 0x84
 8006efe:	a902      	add	r1, sp, #8
 8006f00:	4628      	mov	r0, r5
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	f000 f994 	bl	8007230 <_svfiprintf_r>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	bfbc      	itt	lt
 8006f0c:	238b      	movlt	r3, #139	@ 0x8b
 8006f0e:	602b      	strlt	r3, [r5, #0]
 8006f10:	2c00      	cmp	r4, #0
 8006f12:	d0da      	beq.n	8006eca <sniprintf+0x16>
 8006f14:	9b02      	ldr	r3, [sp, #8]
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	e7d6      	b.n	8006eca <sniprintf+0x16>
 8006f1c:	24000014 	.word	0x24000014

08006f20 <memset>:
 8006f20:	4402      	add	r2, r0
 8006f22:	4603      	mov	r3, r0
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d100      	bne.n	8006f2a <memset+0xa>
 8006f28:	4770      	bx	lr
 8006f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f2e:	e7f9      	b.n	8006f24 <memset+0x4>

08006f30 <__errno>:
 8006f30:	4b01      	ldr	r3, [pc, #4]	@ (8006f38 <__errno+0x8>)
 8006f32:	6818      	ldr	r0, [r3, #0]
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	24000014 	.word	0x24000014

08006f3c <__libc_init_array>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8006f74 <__libc_init_array+0x38>)
 8006f40:	4c0d      	ldr	r4, [pc, #52]	@ (8006f78 <__libc_init_array+0x3c>)
 8006f42:	1b64      	subs	r4, r4, r5
 8006f44:	10a4      	asrs	r4, r4, #2
 8006f46:	2600      	movs	r6, #0
 8006f48:	42a6      	cmp	r6, r4
 8006f4a:	d109      	bne.n	8006f60 <__libc_init_array+0x24>
 8006f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8006f7c <__libc_init_array+0x40>)
 8006f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8006f80 <__libc_init_array+0x44>)
 8006f50:	f000 fc64 	bl	800781c <_init>
 8006f54:	1b64      	subs	r4, r4, r5
 8006f56:	10a4      	asrs	r4, r4, #2
 8006f58:	2600      	movs	r6, #0
 8006f5a:	42a6      	cmp	r6, r4
 8006f5c:	d105      	bne.n	8006f6a <__libc_init_array+0x2e>
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}
 8006f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f64:	4798      	blx	r3
 8006f66:	3601      	adds	r6, #1
 8006f68:	e7ee      	b.n	8006f48 <__libc_init_array+0xc>
 8006f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6e:	4798      	blx	r3
 8006f70:	3601      	adds	r6, #1
 8006f72:	e7f2      	b.n	8006f5a <__libc_init_array+0x1e>
 8006f74:	080078e0 	.word	0x080078e0
 8006f78:	080078e0 	.word	0x080078e0
 8006f7c:	080078e0 	.word	0x080078e0
 8006f80:	080078e4 	.word	0x080078e4

08006f84 <__retarget_lock_acquire_recursive>:
 8006f84:	4770      	bx	lr

08006f86 <__retarget_lock_release_recursive>:
 8006f86:	4770      	bx	lr

08006f88 <_free_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	d041      	beq.n	8007014 <_free_r+0x8c>
 8006f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f94:	1f0c      	subs	r4, r1, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bfb8      	it	lt
 8006f9a:	18e4      	addlt	r4, r4, r3
 8006f9c:	f000 f8e0 	bl	8007160 <__malloc_lock>
 8006fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8007018 <_free_r+0x90>)
 8006fa2:	6813      	ldr	r3, [r2, #0]
 8006fa4:	b933      	cbnz	r3, 8006fb4 <_free_r+0x2c>
 8006fa6:	6063      	str	r3, [r4, #4]
 8006fa8:	6014      	str	r4, [r2, #0]
 8006faa:	4628      	mov	r0, r5
 8006fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fb0:	f000 b8dc 	b.w	800716c <__malloc_unlock>
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	d908      	bls.n	8006fca <_free_r+0x42>
 8006fb8:	6820      	ldr	r0, [r4, #0]
 8006fba:	1821      	adds	r1, r4, r0
 8006fbc:	428b      	cmp	r3, r1
 8006fbe:	bf01      	itttt	eq
 8006fc0:	6819      	ldreq	r1, [r3, #0]
 8006fc2:	685b      	ldreq	r3, [r3, #4]
 8006fc4:	1809      	addeq	r1, r1, r0
 8006fc6:	6021      	streq	r1, [r4, #0]
 8006fc8:	e7ed      	b.n	8006fa6 <_free_r+0x1e>
 8006fca:	461a      	mov	r2, r3
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	b10b      	cbz	r3, 8006fd4 <_free_r+0x4c>
 8006fd0:	42a3      	cmp	r3, r4
 8006fd2:	d9fa      	bls.n	8006fca <_free_r+0x42>
 8006fd4:	6811      	ldr	r1, [r2, #0]
 8006fd6:	1850      	adds	r0, r2, r1
 8006fd8:	42a0      	cmp	r0, r4
 8006fda:	d10b      	bne.n	8006ff4 <_free_r+0x6c>
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	4401      	add	r1, r0
 8006fe0:	1850      	adds	r0, r2, r1
 8006fe2:	4283      	cmp	r3, r0
 8006fe4:	6011      	str	r1, [r2, #0]
 8006fe6:	d1e0      	bne.n	8006faa <_free_r+0x22>
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	6053      	str	r3, [r2, #4]
 8006fee:	4408      	add	r0, r1
 8006ff0:	6010      	str	r0, [r2, #0]
 8006ff2:	e7da      	b.n	8006faa <_free_r+0x22>
 8006ff4:	d902      	bls.n	8006ffc <_free_r+0x74>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	602b      	str	r3, [r5, #0]
 8006ffa:	e7d6      	b.n	8006faa <_free_r+0x22>
 8006ffc:	6820      	ldr	r0, [r4, #0]
 8006ffe:	1821      	adds	r1, r4, r0
 8007000:	428b      	cmp	r3, r1
 8007002:	bf04      	itt	eq
 8007004:	6819      	ldreq	r1, [r3, #0]
 8007006:	685b      	ldreq	r3, [r3, #4]
 8007008:	6063      	str	r3, [r4, #4]
 800700a:	bf04      	itt	eq
 800700c:	1809      	addeq	r1, r1, r0
 800700e:	6021      	streq	r1, [r4, #0]
 8007010:	6054      	str	r4, [r2, #4]
 8007012:	e7ca      	b.n	8006faa <_free_r+0x22>
 8007014:	bd38      	pop	{r3, r4, r5, pc}
 8007016:	bf00      	nop
 8007018:	24000334 	.word	0x24000334

0800701c <sbrk_aligned>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	4e0f      	ldr	r6, [pc, #60]	@ (800705c <sbrk_aligned+0x40>)
 8007020:	460c      	mov	r4, r1
 8007022:	6831      	ldr	r1, [r6, #0]
 8007024:	4605      	mov	r5, r0
 8007026:	b911      	cbnz	r1, 800702e <sbrk_aligned+0x12>
 8007028:	f000 fba4 	bl	8007774 <_sbrk_r>
 800702c:	6030      	str	r0, [r6, #0]
 800702e:	4621      	mov	r1, r4
 8007030:	4628      	mov	r0, r5
 8007032:	f000 fb9f 	bl	8007774 <_sbrk_r>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	d103      	bne.n	8007042 <sbrk_aligned+0x26>
 800703a:	f04f 34ff 	mov.w	r4, #4294967295
 800703e:	4620      	mov	r0, r4
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	1cc4      	adds	r4, r0, #3
 8007044:	f024 0403 	bic.w	r4, r4, #3
 8007048:	42a0      	cmp	r0, r4
 800704a:	d0f8      	beq.n	800703e <sbrk_aligned+0x22>
 800704c:	1a21      	subs	r1, r4, r0
 800704e:	4628      	mov	r0, r5
 8007050:	f000 fb90 	bl	8007774 <_sbrk_r>
 8007054:	3001      	adds	r0, #1
 8007056:	d1f2      	bne.n	800703e <sbrk_aligned+0x22>
 8007058:	e7ef      	b.n	800703a <sbrk_aligned+0x1e>
 800705a:	bf00      	nop
 800705c:	24000330 	.word	0x24000330

08007060 <_malloc_r>:
 8007060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007064:	1ccd      	adds	r5, r1, #3
 8007066:	f025 0503 	bic.w	r5, r5, #3
 800706a:	3508      	adds	r5, #8
 800706c:	2d0c      	cmp	r5, #12
 800706e:	bf38      	it	cc
 8007070:	250c      	movcc	r5, #12
 8007072:	2d00      	cmp	r5, #0
 8007074:	4606      	mov	r6, r0
 8007076:	db01      	blt.n	800707c <_malloc_r+0x1c>
 8007078:	42a9      	cmp	r1, r5
 800707a:	d904      	bls.n	8007086 <_malloc_r+0x26>
 800707c:	230c      	movs	r3, #12
 800707e:	6033      	str	r3, [r6, #0]
 8007080:	2000      	movs	r0, #0
 8007082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800715c <_malloc_r+0xfc>
 800708a:	f000 f869 	bl	8007160 <__malloc_lock>
 800708e:	f8d8 3000 	ldr.w	r3, [r8]
 8007092:	461c      	mov	r4, r3
 8007094:	bb44      	cbnz	r4, 80070e8 <_malloc_r+0x88>
 8007096:	4629      	mov	r1, r5
 8007098:	4630      	mov	r0, r6
 800709a:	f7ff ffbf 	bl	800701c <sbrk_aligned>
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	4604      	mov	r4, r0
 80070a2:	d158      	bne.n	8007156 <_malloc_r+0xf6>
 80070a4:	f8d8 4000 	ldr.w	r4, [r8]
 80070a8:	4627      	mov	r7, r4
 80070aa:	2f00      	cmp	r7, #0
 80070ac:	d143      	bne.n	8007136 <_malloc_r+0xd6>
 80070ae:	2c00      	cmp	r4, #0
 80070b0:	d04b      	beq.n	800714a <_malloc_r+0xea>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	4639      	mov	r1, r7
 80070b6:	4630      	mov	r0, r6
 80070b8:	eb04 0903 	add.w	r9, r4, r3
 80070bc:	f000 fb5a 	bl	8007774 <_sbrk_r>
 80070c0:	4581      	cmp	r9, r0
 80070c2:	d142      	bne.n	800714a <_malloc_r+0xea>
 80070c4:	6821      	ldr	r1, [r4, #0]
 80070c6:	1a6d      	subs	r5, r5, r1
 80070c8:	4629      	mov	r1, r5
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7ff ffa6 	bl	800701c <sbrk_aligned>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d03a      	beq.n	800714a <_malloc_r+0xea>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	442b      	add	r3, r5
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	f8d8 3000 	ldr.w	r3, [r8]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	bb62      	cbnz	r2, 800713c <_malloc_r+0xdc>
 80070e2:	f8c8 7000 	str.w	r7, [r8]
 80070e6:	e00f      	b.n	8007108 <_malloc_r+0xa8>
 80070e8:	6822      	ldr	r2, [r4, #0]
 80070ea:	1b52      	subs	r2, r2, r5
 80070ec:	d420      	bmi.n	8007130 <_malloc_r+0xd0>
 80070ee:	2a0b      	cmp	r2, #11
 80070f0:	d917      	bls.n	8007122 <_malloc_r+0xc2>
 80070f2:	1961      	adds	r1, r4, r5
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	6025      	str	r5, [r4, #0]
 80070f8:	bf18      	it	ne
 80070fa:	6059      	strne	r1, [r3, #4]
 80070fc:	6863      	ldr	r3, [r4, #4]
 80070fe:	bf08      	it	eq
 8007100:	f8c8 1000 	streq.w	r1, [r8]
 8007104:	5162      	str	r2, [r4, r5]
 8007106:	604b      	str	r3, [r1, #4]
 8007108:	4630      	mov	r0, r6
 800710a:	f000 f82f 	bl	800716c <__malloc_unlock>
 800710e:	f104 000b 	add.w	r0, r4, #11
 8007112:	1d23      	adds	r3, r4, #4
 8007114:	f020 0007 	bic.w	r0, r0, #7
 8007118:	1ac2      	subs	r2, r0, r3
 800711a:	bf1c      	itt	ne
 800711c:	1a1b      	subne	r3, r3, r0
 800711e:	50a3      	strne	r3, [r4, r2]
 8007120:	e7af      	b.n	8007082 <_malloc_r+0x22>
 8007122:	6862      	ldr	r2, [r4, #4]
 8007124:	42a3      	cmp	r3, r4
 8007126:	bf0c      	ite	eq
 8007128:	f8c8 2000 	streq.w	r2, [r8]
 800712c:	605a      	strne	r2, [r3, #4]
 800712e:	e7eb      	b.n	8007108 <_malloc_r+0xa8>
 8007130:	4623      	mov	r3, r4
 8007132:	6864      	ldr	r4, [r4, #4]
 8007134:	e7ae      	b.n	8007094 <_malloc_r+0x34>
 8007136:	463c      	mov	r4, r7
 8007138:	687f      	ldr	r7, [r7, #4]
 800713a:	e7b6      	b.n	80070aa <_malloc_r+0x4a>
 800713c:	461a      	mov	r2, r3
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	42a3      	cmp	r3, r4
 8007142:	d1fb      	bne.n	800713c <_malloc_r+0xdc>
 8007144:	2300      	movs	r3, #0
 8007146:	6053      	str	r3, [r2, #4]
 8007148:	e7de      	b.n	8007108 <_malloc_r+0xa8>
 800714a:	230c      	movs	r3, #12
 800714c:	6033      	str	r3, [r6, #0]
 800714e:	4630      	mov	r0, r6
 8007150:	f000 f80c 	bl	800716c <__malloc_unlock>
 8007154:	e794      	b.n	8007080 <_malloc_r+0x20>
 8007156:	6005      	str	r5, [r0, #0]
 8007158:	e7d6      	b.n	8007108 <_malloc_r+0xa8>
 800715a:	bf00      	nop
 800715c:	24000334 	.word	0x24000334

08007160 <__malloc_lock>:
 8007160:	4801      	ldr	r0, [pc, #4]	@ (8007168 <__malloc_lock+0x8>)
 8007162:	f7ff bf0f 	b.w	8006f84 <__retarget_lock_acquire_recursive>
 8007166:	bf00      	nop
 8007168:	2400032c 	.word	0x2400032c

0800716c <__malloc_unlock>:
 800716c:	4801      	ldr	r0, [pc, #4]	@ (8007174 <__malloc_unlock+0x8>)
 800716e:	f7ff bf0a 	b.w	8006f86 <__retarget_lock_release_recursive>
 8007172:	bf00      	nop
 8007174:	2400032c 	.word	0x2400032c

08007178 <__ssputs_r>:
 8007178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800717c:	688e      	ldr	r6, [r1, #8]
 800717e:	461f      	mov	r7, r3
 8007180:	42be      	cmp	r6, r7
 8007182:	680b      	ldr	r3, [r1, #0]
 8007184:	4682      	mov	sl, r0
 8007186:	460c      	mov	r4, r1
 8007188:	4690      	mov	r8, r2
 800718a:	d82d      	bhi.n	80071e8 <__ssputs_r+0x70>
 800718c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007190:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007194:	d026      	beq.n	80071e4 <__ssputs_r+0x6c>
 8007196:	6965      	ldr	r5, [r4, #20]
 8007198:	6909      	ldr	r1, [r1, #16]
 800719a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800719e:	eba3 0901 	sub.w	r9, r3, r1
 80071a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071a6:	1c7b      	adds	r3, r7, #1
 80071a8:	444b      	add	r3, r9
 80071aa:	106d      	asrs	r5, r5, #1
 80071ac:	429d      	cmp	r5, r3
 80071ae:	bf38      	it	cc
 80071b0:	461d      	movcc	r5, r3
 80071b2:	0553      	lsls	r3, r2, #21
 80071b4:	d527      	bpl.n	8007206 <__ssputs_r+0x8e>
 80071b6:	4629      	mov	r1, r5
 80071b8:	f7ff ff52 	bl	8007060 <_malloc_r>
 80071bc:	4606      	mov	r6, r0
 80071be:	b360      	cbz	r0, 800721a <__ssputs_r+0xa2>
 80071c0:	6921      	ldr	r1, [r4, #16]
 80071c2:	464a      	mov	r2, r9
 80071c4:	f000 fae6 	bl	8007794 <memcpy>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d2:	81a3      	strh	r3, [r4, #12]
 80071d4:	6126      	str	r6, [r4, #16]
 80071d6:	6165      	str	r5, [r4, #20]
 80071d8:	444e      	add	r6, r9
 80071da:	eba5 0509 	sub.w	r5, r5, r9
 80071de:	6026      	str	r6, [r4, #0]
 80071e0:	60a5      	str	r5, [r4, #8]
 80071e2:	463e      	mov	r6, r7
 80071e4:	42be      	cmp	r6, r7
 80071e6:	d900      	bls.n	80071ea <__ssputs_r+0x72>
 80071e8:	463e      	mov	r6, r7
 80071ea:	6820      	ldr	r0, [r4, #0]
 80071ec:	4632      	mov	r2, r6
 80071ee:	4641      	mov	r1, r8
 80071f0:	f000 faa6 	bl	8007740 <memmove>
 80071f4:	68a3      	ldr	r3, [r4, #8]
 80071f6:	1b9b      	subs	r3, r3, r6
 80071f8:	60a3      	str	r3, [r4, #8]
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	4433      	add	r3, r6
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	2000      	movs	r0, #0
 8007202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007206:	462a      	mov	r2, r5
 8007208:	f000 fad2 	bl	80077b0 <_realloc_r>
 800720c:	4606      	mov	r6, r0
 800720e:	2800      	cmp	r0, #0
 8007210:	d1e0      	bne.n	80071d4 <__ssputs_r+0x5c>
 8007212:	6921      	ldr	r1, [r4, #16]
 8007214:	4650      	mov	r0, sl
 8007216:	f7ff feb7 	bl	8006f88 <_free_r>
 800721a:	230c      	movs	r3, #12
 800721c:	f8ca 3000 	str.w	r3, [sl]
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007226:	81a3      	strh	r3, [r4, #12]
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	e7e9      	b.n	8007202 <__ssputs_r+0x8a>
	...

08007230 <_svfiprintf_r>:
 8007230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007234:	4698      	mov	r8, r3
 8007236:	898b      	ldrh	r3, [r1, #12]
 8007238:	061b      	lsls	r3, r3, #24
 800723a:	b09d      	sub	sp, #116	@ 0x74
 800723c:	4607      	mov	r7, r0
 800723e:	460d      	mov	r5, r1
 8007240:	4614      	mov	r4, r2
 8007242:	d510      	bpl.n	8007266 <_svfiprintf_r+0x36>
 8007244:	690b      	ldr	r3, [r1, #16]
 8007246:	b973      	cbnz	r3, 8007266 <_svfiprintf_r+0x36>
 8007248:	2140      	movs	r1, #64	@ 0x40
 800724a:	f7ff ff09 	bl	8007060 <_malloc_r>
 800724e:	6028      	str	r0, [r5, #0]
 8007250:	6128      	str	r0, [r5, #16]
 8007252:	b930      	cbnz	r0, 8007262 <_svfiprintf_r+0x32>
 8007254:	230c      	movs	r3, #12
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	b01d      	add	sp, #116	@ 0x74
 800725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007262:	2340      	movs	r3, #64	@ 0x40
 8007264:	616b      	str	r3, [r5, #20]
 8007266:	2300      	movs	r3, #0
 8007268:	9309      	str	r3, [sp, #36]	@ 0x24
 800726a:	2320      	movs	r3, #32
 800726c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007270:	f8cd 800c 	str.w	r8, [sp, #12]
 8007274:	2330      	movs	r3, #48	@ 0x30
 8007276:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007414 <_svfiprintf_r+0x1e4>
 800727a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800727e:	f04f 0901 	mov.w	r9, #1
 8007282:	4623      	mov	r3, r4
 8007284:	469a      	mov	sl, r3
 8007286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800728a:	b10a      	cbz	r2, 8007290 <_svfiprintf_r+0x60>
 800728c:	2a25      	cmp	r2, #37	@ 0x25
 800728e:	d1f9      	bne.n	8007284 <_svfiprintf_r+0x54>
 8007290:	ebba 0b04 	subs.w	fp, sl, r4
 8007294:	d00b      	beq.n	80072ae <_svfiprintf_r+0x7e>
 8007296:	465b      	mov	r3, fp
 8007298:	4622      	mov	r2, r4
 800729a:	4629      	mov	r1, r5
 800729c:	4638      	mov	r0, r7
 800729e:	f7ff ff6b 	bl	8007178 <__ssputs_r>
 80072a2:	3001      	adds	r0, #1
 80072a4:	f000 80a7 	beq.w	80073f6 <_svfiprintf_r+0x1c6>
 80072a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072aa:	445a      	add	r2, fp
 80072ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80072ae:	f89a 3000 	ldrb.w	r3, [sl]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 809f 	beq.w	80073f6 <_svfiprintf_r+0x1c6>
 80072b8:	2300      	movs	r3, #0
 80072ba:	f04f 32ff 	mov.w	r2, #4294967295
 80072be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072c2:	f10a 0a01 	add.w	sl, sl, #1
 80072c6:	9304      	str	r3, [sp, #16]
 80072c8:	9307      	str	r3, [sp, #28]
 80072ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80072d0:	4654      	mov	r4, sl
 80072d2:	2205      	movs	r2, #5
 80072d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d8:	484e      	ldr	r0, [pc, #312]	@ (8007414 <_svfiprintf_r+0x1e4>)
 80072da:	f7f9 f821 	bl	8000320 <memchr>
 80072de:	9a04      	ldr	r2, [sp, #16]
 80072e0:	b9d8      	cbnz	r0, 800731a <_svfiprintf_r+0xea>
 80072e2:	06d0      	lsls	r0, r2, #27
 80072e4:	bf44      	itt	mi
 80072e6:	2320      	movmi	r3, #32
 80072e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072ec:	0711      	lsls	r1, r2, #28
 80072ee:	bf44      	itt	mi
 80072f0:	232b      	movmi	r3, #43	@ 0x2b
 80072f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072f6:	f89a 3000 	ldrb.w	r3, [sl]
 80072fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80072fc:	d015      	beq.n	800732a <_svfiprintf_r+0xfa>
 80072fe:	9a07      	ldr	r2, [sp, #28]
 8007300:	4654      	mov	r4, sl
 8007302:	2000      	movs	r0, #0
 8007304:	f04f 0c0a 	mov.w	ip, #10
 8007308:	4621      	mov	r1, r4
 800730a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800730e:	3b30      	subs	r3, #48	@ 0x30
 8007310:	2b09      	cmp	r3, #9
 8007312:	d94b      	bls.n	80073ac <_svfiprintf_r+0x17c>
 8007314:	b1b0      	cbz	r0, 8007344 <_svfiprintf_r+0x114>
 8007316:	9207      	str	r2, [sp, #28]
 8007318:	e014      	b.n	8007344 <_svfiprintf_r+0x114>
 800731a:	eba0 0308 	sub.w	r3, r0, r8
 800731e:	fa09 f303 	lsl.w	r3, r9, r3
 8007322:	4313      	orrs	r3, r2
 8007324:	9304      	str	r3, [sp, #16]
 8007326:	46a2      	mov	sl, r4
 8007328:	e7d2      	b.n	80072d0 <_svfiprintf_r+0xa0>
 800732a:	9b03      	ldr	r3, [sp, #12]
 800732c:	1d19      	adds	r1, r3, #4
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	9103      	str	r1, [sp, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	bfbb      	ittet	lt
 8007336:	425b      	neglt	r3, r3
 8007338:	f042 0202 	orrlt.w	r2, r2, #2
 800733c:	9307      	strge	r3, [sp, #28]
 800733e:	9307      	strlt	r3, [sp, #28]
 8007340:	bfb8      	it	lt
 8007342:	9204      	strlt	r2, [sp, #16]
 8007344:	7823      	ldrb	r3, [r4, #0]
 8007346:	2b2e      	cmp	r3, #46	@ 0x2e
 8007348:	d10a      	bne.n	8007360 <_svfiprintf_r+0x130>
 800734a:	7863      	ldrb	r3, [r4, #1]
 800734c:	2b2a      	cmp	r3, #42	@ 0x2a
 800734e:	d132      	bne.n	80073b6 <_svfiprintf_r+0x186>
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	1d1a      	adds	r2, r3, #4
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	9203      	str	r2, [sp, #12]
 8007358:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800735c:	3402      	adds	r4, #2
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007424 <_svfiprintf_r+0x1f4>
 8007364:	7821      	ldrb	r1, [r4, #0]
 8007366:	2203      	movs	r2, #3
 8007368:	4650      	mov	r0, sl
 800736a:	f7f8 ffd9 	bl	8000320 <memchr>
 800736e:	b138      	cbz	r0, 8007380 <_svfiprintf_r+0x150>
 8007370:	9b04      	ldr	r3, [sp, #16]
 8007372:	eba0 000a 	sub.w	r0, r0, sl
 8007376:	2240      	movs	r2, #64	@ 0x40
 8007378:	4082      	lsls	r2, r0
 800737a:	4313      	orrs	r3, r2
 800737c:	3401      	adds	r4, #1
 800737e:	9304      	str	r3, [sp, #16]
 8007380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007384:	4824      	ldr	r0, [pc, #144]	@ (8007418 <_svfiprintf_r+0x1e8>)
 8007386:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800738a:	2206      	movs	r2, #6
 800738c:	f7f8 ffc8 	bl	8000320 <memchr>
 8007390:	2800      	cmp	r0, #0
 8007392:	d036      	beq.n	8007402 <_svfiprintf_r+0x1d2>
 8007394:	4b21      	ldr	r3, [pc, #132]	@ (800741c <_svfiprintf_r+0x1ec>)
 8007396:	bb1b      	cbnz	r3, 80073e0 <_svfiprintf_r+0x1b0>
 8007398:	9b03      	ldr	r3, [sp, #12]
 800739a:	3307      	adds	r3, #7
 800739c:	f023 0307 	bic.w	r3, r3, #7
 80073a0:	3308      	adds	r3, #8
 80073a2:	9303      	str	r3, [sp, #12]
 80073a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a6:	4433      	add	r3, r6
 80073a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073aa:	e76a      	b.n	8007282 <_svfiprintf_r+0x52>
 80073ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80073b0:	460c      	mov	r4, r1
 80073b2:	2001      	movs	r0, #1
 80073b4:	e7a8      	b.n	8007308 <_svfiprintf_r+0xd8>
 80073b6:	2300      	movs	r3, #0
 80073b8:	3401      	adds	r4, #1
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	4619      	mov	r1, r3
 80073be:	f04f 0c0a 	mov.w	ip, #10
 80073c2:	4620      	mov	r0, r4
 80073c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073c8:	3a30      	subs	r2, #48	@ 0x30
 80073ca:	2a09      	cmp	r2, #9
 80073cc:	d903      	bls.n	80073d6 <_svfiprintf_r+0x1a6>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0c6      	beq.n	8007360 <_svfiprintf_r+0x130>
 80073d2:	9105      	str	r1, [sp, #20]
 80073d4:	e7c4      	b.n	8007360 <_svfiprintf_r+0x130>
 80073d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073da:	4604      	mov	r4, r0
 80073dc:	2301      	movs	r3, #1
 80073de:	e7f0      	b.n	80073c2 <_svfiprintf_r+0x192>
 80073e0:	ab03      	add	r3, sp, #12
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	462a      	mov	r2, r5
 80073e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007420 <_svfiprintf_r+0x1f0>)
 80073e8:	a904      	add	r1, sp, #16
 80073ea:	4638      	mov	r0, r7
 80073ec:	f3af 8000 	nop.w
 80073f0:	1c42      	adds	r2, r0, #1
 80073f2:	4606      	mov	r6, r0
 80073f4:	d1d6      	bne.n	80073a4 <_svfiprintf_r+0x174>
 80073f6:	89ab      	ldrh	r3, [r5, #12]
 80073f8:	065b      	lsls	r3, r3, #25
 80073fa:	f53f af2d 	bmi.w	8007258 <_svfiprintf_r+0x28>
 80073fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007400:	e72c      	b.n	800725c <_svfiprintf_r+0x2c>
 8007402:	ab03      	add	r3, sp, #12
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	462a      	mov	r2, r5
 8007408:	4b05      	ldr	r3, [pc, #20]	@ (8007420 <_svfiprintf_r+0x1f0>)
 800740a:	a904      	add	r1, sp, #16
 800740c:	4638      	mov	r0, r7
 800740e:	f000 f879 	bl	8007504 <_printf_i>
 8007412:	e7ed      	b.n	80073f0 <_svfiprintf_r+0x1c0>
 8007414:	080078a4 	.word	0x080078a4
 8007418:	080078ae 	.word	0x080078ae
 800741c:	00000000 	.word	0x00000000
 8007420:	08007179 	.word	0x08007179
 8007424:	080078aa 	.word	0x080078aa

08007428 <_printf_common>:
 8007428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800742c:	4616      	mov	r6, r2
 800742e:	4698      	mov	r8, r3
 8007430:	688a      	ldr	r2, [r1, #8]
 8007432:	690b      	ldr	r3, [r1, #16]
 8007434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007438:	4293      	cmp	r3, r2
 800743a:	bfb8      	it	lt
 800743c:	4613      	movlt	r3, r2
 800743e:	6033      	str	r3, [r6, #0]
 8007440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007444:	4607      	mov	r7, r0
 8007446:	460c      	mov	r4, r1
 8007448:	b10a      	cbz	r2, 800744e <_printf_common+0x26>
 800744a:	3301      	adds	r3, #1
 800744c:	6033      	str	r3, [r6, #0]
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	0699      	lsls	r1, r3, #26
 8007452:	bf42      	ittt	mi
 8007454:	6833      	ldrmi	r3, [r6, #0]
 8007456:	3302      	addmi	r3, #2
 8007458:	6033      	strmi	r3, [r6, #0]
 800745a:	6825      	ldr	r5, [r4, #0]
 800745c:	f015 0506 	ands.w	r5, r5, #6
 8007460:	d106      	bne.n	8007470 <_printf_common+0x48>
 8007462:	f104 0a19 	add.w	sl, r4, #25
 8007466:	68e3      	ldr	r3, [r4, #12]
 8007468:	6832      	ldr	r2, [r6, #0]
 800746a:	1a9b      	subs	r3, r3, r2
 800746c:	42ab      	cmp	r3, r5
 800746e:	dc26      	bgt.n	80074be <_printf_common+0x96>
 8007470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007474:	6822      	ldr	r2, [r4, #0]
 8007476:	3b00      	subs	r3, #0
 8007478:	bf18      	it	ne
 800747a:	2301      	movne	r3, #1
 800747c:	0692      	lsls	r2, r2, #26
 800747e:	d42b      	bmi.n	80074d8 <_printf_common+0xb0>
 8007480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007484:	4641      	mov	r1, r8
 8007486:	4638      	mov	r0, r7
 8007488:	47c8      	blx	r9
 800748a:	3001      	adds	r0, #1
 800748c:	d01e      	beq.n	80074cc <_printf_common+0xa4>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	6922      	ldr	r2, [r4, #16]
 8007492:	f003 0306 	and.w	r3, r3, #6
 8007496:	2b04      	cmp	r3, #4
 8007498:	bf02      	ittt	eq
 800749a:	68e5      	ldreq	r5, [r4, #12]
 800749c:	6833      	ldreq	r3, [r6, #0]
 800749e:	1aed      	subeq	r5, r5, r3
 80074a0:	68a3      	ldr	r3, [r4, #8]
 80074a2:	bf0c      	ite	eq
 80074a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074a8:	2500      	movne	r5, #0
 80074aa:	4293      	cmp	r3, r2
 80074ac:	bfc4      	itt	gt
 80074ae:	1a9b      	subgt	r3, r3, r2
 80074b0:	18ed      	addgt	r5, r5, r3
 80074b2:	2600      	movs	r6, #0
 80074b4:	341a      	adds	r4, #26
 80074b6:	42b5      	cmp	r5, r6
 80074b8:	d11a      	bne.n	80074f0 <_printf_common+0xc8>
 80074ba:	2000      	movs	r0, #0
 80074bc:	e008      	b.n	80074d0 <_printf_common+0xa8>
 80074be:	2301      	movs	r3, #1
 80074c0:	4652      	mov	r2, sl
 80074c2:	4641      	mov	r1, r8
 80074c4:	4638      	mov	r0, r7
 80074c6:	47c8      	blx	r9
 80074c8:	3001      	adds	r0, #1
 80074ca:	d103      	bne.n	80074d4 <_printf_common+0xac>
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d4:	3501      	adds	r5, #1
 80074d6:	e7c6      	b.n	8007466 <_printf_common+0x3e>
 80074d8:	18e1      	adds	r1, r4, r3
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	2030      	movs	r0, #48	@ 0x30
 80074de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074e2:	4422      	add	r2, r4
 80074e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074ec:	3302      	adds	r3, #2
 80074ee:	e7c7      	b.n	8007480 <_printf_common+0x58>
 80074f0:	2301      	movs	r3, #1
 80074f2:	4622      	mov	r2, r4
 80074f4:	4641      	mov	r1, r8
 80074f6:	4638      	mov	r0, r7
 80074f8:	47c8      	blx	r9
 80074fa:	3001      	adds	r0, #1
 80074fc:	d0e6      	beq.n	80074cc <_printf_common+0xa4>
 80074fe:	3601      	adds	r6, #1
 8007500:	e7d9      	b.n	80074b6 <_printf_common+0x8e>
	...

08007504 <_printf_i>:
 8007504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007508:	7e0f      	ldrb	r7, [r1, #24]
 800750a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800750c:	2f78      	cmp	r7, #120	@ 0x78
 800750e:	4691      	mov	r9, r2
 8007510:	4680      	mov	r8, r0
 8007512:	460c      	mov	r4, r1
 8007514:	469a      	mov	sl, r3
 8007516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800751a:	d807      	bhi.n	800752c <_printf_i+0x28>
 800751c:	2f62      	cmp	r7, #98	@ 0x62
 800751e:	d80a      	bhi.n	8007536 <_printf_i+0x32>
 8007520:	2f00      	cmp	r7, #0
 8007522:	f000 80d1 	beq.w	80076c8 <_printf_i+0x1c4>
 8007526:	2f58      	cmp	r7, #88	@ 0x58
 8007528:	f000 80b8 	beq.w	800769c <_printf_i+0x198>
 800752c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007534:	e03a      	b.n	80075ac <_printf_i+0xa8>
 8007536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800753a:	2b15      	cmp	r3, #21
 800753c:	d8f6      	bhi.n	800752c <_printf_i+0x28>
 800753e:	a101      	add	r1, pc, #4	@ (adr r1, 8007544 <_printf_i+0x40>)
 8007540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007544:	0800759d 	.word	0x0800759d
 8007548:	080075b1 	.word	0x080075b1
 800754c:	0800752d 	.word	0x0800752d
 8007550:	0800752d 	.word	0x0800752d
 8007554:	0800752d 	.word	0x0800752d
 8007558:	0800752d 	.word	0x0800752d
 800755c:	080075b1 	.word	0x080075b1
 8007560:	0800752d 	.word	0x0800752d
 8007564:	0800752d 	.word	0x0800752d
 8007568:	0800752d 	.word	0x0800752d
 800756c:	0800752d 	.word	0x0800752d
 8007570:	080076af 	.word	0x080076af
 8007574:	080075db 	.word	0x080075db
 8007578:	08007669 	.word	0x08007669
 800757c:	0800752d 	.word	0x0800752d
 8007580:	0800752d 	.word	0x0800752d
 8007584:	080076d1 	.word	0x080076d1
 8007588:	0800752d 	.word	0x0800752d
 800758c:	080075db 	.word	0x080075db
 8007590:	0800752d 	.word	0x0800752d
 8007594:	0800752d 	.word	0x0800752d
 8007598:	08007671 	.word	0x08007671
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	1d1a      	adds	r2, r3, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6032      	str	r2, [r6, #0]
 80075a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075ac:	2301      	movs	r3, #1
 80075ae:	e09c      	b.n	80076ea <_printf_i+0x1e6>
 80075b0:	6833      	ldr	r3, [r6, #0]
 80075b2:	6820      	ldr	r0, [r4, #0]
 80075b4:	1d19      	adds	r1, r3, #4
 80075b6:	6031      	str	r1, [r6, #0]
 80075b8:	0606      	lsls	r6, r0, #24
 80075ba:	d501      	bpl.n	80075c0 <_printf_i+0xbc>
 80075bc:	681d      	ldr	r5, [r3, #0]
 80075be:	e003      	b.n	80075c8 <_printf_i+0xc4>
 80075c0:	0645      	lsls	r5, r0, #25
 80075c2:	d5fb      	bpl.n	80075bc <_printf_i+0xb8>
 80075c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075c8:	2d00      	cmp	r5, #0
 80075ca:	da03      	bge.n	80075d4 <_printf_i+0xd0>
 80075cc:	232d      	movs	r3, #45	@ 0x2d
 80075ce:	426d      	negs	r5, r5
 80075d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075d4:	4858      	ldr	r0, [pc, #352]	@ (8007738 <_printf_i+0x234>)
 80075d6:	230a      	movs	r3, #10
 80075d8:	e011      	b.n	80075fe <_printf_i+0xfa>
 80075da:	6821      	ldr	r1, [r4, #0]
 80075dc:	6833      	ldr	r3, [r6, #0]
 80075de:	0608      	lsls	r0, r1, #24
 80075e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80075e4:	d402      	bmi.n	80075ec <_printf_i+0xe8>
 80075e6:	0649      	lsls	r1, r1, #25
 80075e8:	bf48      	it	mi
 80075ea:	b2ad      	uxthmi	r5, r5
 80075ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80075ee:	4852      	ldr	r0, [pc, #328]	@ (8007738 <_printf_i+0x234>)
 80075f0:	6033      	str	r3, [r6, #0]
 80075f2:	bf14      	ite	ne
 80075f4:	230a      	movne	r3, #10
 80075f6:	2308      	moveq	r3, #8
 80075f8:	2100      	movs	r1, #0
 80075fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075fe:	6866      	ldr	r6, [r4, #4]
 8007600:	60a6      	str	r6, [r4, #8]
 8007602:	2e00      	cmp	r6, #0
 8007604:	db05      	blt.n	8007612 <_printf_i+0x10e>
 8007606:	6821      	ldr	r1, [r4, #0]
 8007608:	432e      	orrs	r6, r5
 800760a:	f021 0104 	bic.w	r1, r1, #4
 800760e:	6021      	str	r1, [r4, #0]
 8007610:	d04b      	beq.n	80076aa <_printf_i+0x1a6>
 8007612:	4616      	mov	r6, r2
 8007614:	fbb5 f1f3 	udiv	r1, r5, r3
 8007618:	fb03 5711 	mls	r7, r3, r1, r5
 800761c:	5dc7      	ldrb	r7, [r0, r7]
 800761e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007622:	462f      	mov	r7, r5
 8007624:	42bb      	cmp	r3, r7
 8007626:	460d      	mov	r5, r1
 8007628:	d9f4      	bls.n	8007614 <_printf_i+0x110>
 800762a:	2b08      	cmp	r3, #8
 800762c:	d10b      	bne.n	8007646 <_printf_i+0x142>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	07df      	lsls	r7, r3, #31
 8007632:	d508      	bpl.n	8007646 <_printf_i+0x142>
 8007634:	6923      	ldr	r3, [r4, #16]
 8007636:	6861      	ldr	r1, [r4, #4]
 8007638:	4299      	cmp	r1, r3
 800763a:	bfde      	ittt	le
 800763c:	2330      	movle	r3, #48	@ 0x30
 800763e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007642:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007646:	1b92      	subs	r2, r2, r6
 8007648:	6122      	str	r2, [r4, #16]
 800764a:	f8cd a000 	str.w	sl, [sp]
 800764e:	464b      	mov	r3, r9
 8007650:	aa03      	add	r2, sp, #12
 8007652:	4621      	mov	r1, r4
 8007654:	4640      	mov	r0, r8
 8007656:	f7ff fee7 	bl	8007428 <_printf_common>
 800765a:	3001      	adds	r0, #1
 800765c:	d14a      	bne.n	80076f4 <_printf_i+0x1f0>
 800765e:	f04f 30ff 	mov.w	r0, #4294967295
 8007662:	b004      	add	sp, #16
 8007664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	f043 0320 	orr.w	r3, r3, #32
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	4832      	ldr	r0, [pc, #200]	@ (800773c <_printf_i+0x238>)
 8007672:	2778      	movs	r7, #120	@ 0x78
 8007674:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	6831      	ldr	r1, [r6, #0]
 800767c:	061f      	lsls	r7, r3, #24
 800767e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007682:	d402      	bmi.n	800768a <_printf_i+0x186>
 8007684:	065f      	lsls	r7, r3, #25
 8007686:	bf48      	it	mi
 8007688:	b2ad      	uxthmi	r5, r5
 800768a:	6031      	str	r1, [r6, #0]
 800768c:	07d9      	lsls	r1, r3, #31
 800768e:	bf44      	itt	mi
 8007690:	f043 0320 	orrmi.w	r3, r3, #32
 8007694:	6023      	strmi	r3, [r4, #0]
 8007696:	b11d      	cbz	r5, 80076a0 <_printf_i+0x19c>
 8007698:	2310      	movs	r3, #16
 800769a:	e7ad      	b.n	80075f8 <_printf_i+0xf4>
 800769c:	4826      	ldr	r0, [pc, #152]	@ (8007738 <_printf_i+0x234>)
 800769e:	e7e9      	b.n	8007674 <_printf_i+0x170>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	f023 0320 	bic.w	r3, r3, #32
 80076a6:	6023      	str	r3, [r4, #0]
 80076a8:	e7f6      	b.n	8007698 <_printf_i+0x194>
 80076aa:	4616      	mov	r6, r2
 80076ac:	e7bd      	b.n	800762a <_printf_i+0x126>
 80076ae:	6833      	ldr	r3, [r6, #0]
 80076b0:	6825      	ldr	r5, [r4, #0]
 80076b2:	6961      	ldr	r1, [r4, #20]
 80076b4:	1d18      	adds	r0, r3, #4
 80076b6:	6030      	str	r0, [r6, #0]
 80076b8:	062e      	lsls	r6, r5, #24
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	d501      	bpl.n	80076c2 <_printf_i+0x1be>
 80076be:	6019      	str	r1, [r3, #0]
 80076c0:	e002      	b.n	80076c8 <_printf_i+0x1c4>
 80076c2:	0668      	lsls	r0, r5, #25
 80076c4:	d5fb      	bpl.n	80076be <_printf_i+0x1ba>
 80076c6:	8019      	strh	r1, [r3, #0]
 80076c8:	2300      	movs	r3, #0
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	4616      	mov	r6, r2
 80076ce:	e7bc      	b.n	800764a <_printf_i+0x146>
 80076d0:	6833      	ldr	r3, [r6, #0]
 80076d2:	1d1a      	adds	r2, r3, #4
 80076d4:	6032      	str	r2, [r6, #0]
 80076d6:	681e      	ldr	r6, [r3, #0]
 80076d8:	6862      	ldr	r2, [r4, #4]
 80076da:	2100      	movs	r1, #0
 80076dc:	4630      	mov	r0, r6
 80076de:	f7f8 fe1f 	bl	8000320 <memchr>
 80076e2:	b108      	cbz	r0, 80076e8 <_printf_i+0x1e4>
 80076e4:	1b80      	subs	r0, r0, r6
 80076e6:	6060      	str	r0, [r4, #4]
 80076e8:	6863      	ldr	r3, [r4, #4]
 80076ea:	6123      	str	r3, [r4, #16]
 80076ec:	2300      	movs	r3, #0
 80076ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076f2:	e7aa      	b.n	800764a <_printf_i+0x146>
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	4632      	mov	r2, r6
 80076f8:	4649      	mov	r1, r9
 80076fa:	4640      	mov	r0, r8
 80076fc:	47d0      	blx	sl
 80076fe:	3001      	adds	r0, #1
 8007700:	d0ad      	beq.n	800765e <_printf_i+0x15a>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	079b      	lsls	r3, r3, #30
 8007706:	d413      	bmi.n	8007730 <_printf_i+0x22c>
 8007708:	68e0      	ldr	r0, [r4, #12]
 800770a:	9b03      	ldr	r3, [sp, #12]
 800770c:	4298      	cmp	r0, r3
 800770e:	bfb8      	it	lt
 8007710:	4618      	movlt	r0, r3
 8007712:	e7a6      	b.n	8007662 <_printf_i+0x15e>
 8007714:	2301      	movs	r3, #1
 8007716:	4632      	mov	r2, r6
 8007718:	4649      	mov	r1, r9
 800771a:	4640      	mov	r0, r8
 800771c:	47d0      	blx	sl
 800771e:	3001      	adds	r0, #1
 8007720:	d09d      	beq.n	800765e <_printf_i+0x15a>
 8007722:	3501      	adds	r5, #1
 8007724:	68e3      	ldr	r3, [r4, #12]
 8007726:	9903      	ldr	r1, [sp, #12]
 8007728:	1a5b      	subs	r3, r3, r1
 800772a:	42ab      	cmp	r3, r5
 800772c:	dcf2      	bgt.n	8007714 <_printf_i+0x210>
 800772e:	e7eb      	b.n	8007708 <_printf_i+0x204>
 8007730:	2500      	movs	r5, #0
 8007732:	f104 0619 	add.w	r6, r4, #25
 8007736:	e7f5      	b.n	8007724 <_printf_i+0x220>
 8007738:	080078b5 	.word	0x080078b5
 800773c:	080078c6 	.word	0x080078c6

08007740 <memmove>:
 8007740:	4288      	cmp	r0, r1
 8007742:	b510      	push	{r4, lr}
 8007744:	eb01 0402 	add.w	r4, r1, r2
 8007748:	d902      	bls.n	8007750 <memmove+0x10>
 800774a:	4284      	cmp	r4, r0
 800774c:	4623      	mov	r3, r4
 800774e:	d807      	bhi.n	8007760 <memmove+0x20>
 8007750:	1e43      	subs	r3, r0, #1
 8007752:	42a1      	cmp	r1, r4
 8007754:	d008      	beq.n	8007768 <memmove+0x28>
 8007756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800775a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800775e:	e7f8      	b.n	8007752 <memmove+0x12>
 8007760:	4402      	add	r2, r0
 8007762:	4601      	mov	r1, r0
 8007764:	428a      	cmp	r2, r1
 8007766:	d100      	bne.n	800776a <memmove+0x2a>
 8007768:	bd10      	pop	{r4, pc}
 800776a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800776e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007772:	e7f7      	b.n	8007764 <memmove+0x24>

08007774 <_sbrk_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d06      	ldr	r5, [pc, #24]	@ (8007790 <_sbrk_r+0x1c>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	f7f9 fb5c 	bl	8000e3c <_sbrk>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_sbrk_r+0x1a>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_sbrk_r+0x1a>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	24000328 	.word	0x24000328

08007794 <memcpy>:
 8007794:	440a      	add	r2, r1
 8007796:	4291      	cmp	r1, r2
 8007798:	f100 33ff 	add.w	r3, r0, #4294967295
 800779c:	d100      	bne.n	80077a0 <memcpy+0xc>
 800779e:	4770      	bx	lr
 80077a0:	b510      	push	{r4, lr}
 80077a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077aa:	4291      	cmp	r1, r2
 80077ac:	d1f9      	bne.n	80077a2 <memcpy+0xe>
 80077ae:	bd10      	pop	{r4, pc}

080077b0 <_realloc_r>:
 80077b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b4:	4607      	mov	r7, r0
 80077b6:	4614      	mov	r4, r2
 80077b8:	460d      	mov	r5, r1
 80077ba:	b921      	cbnz	r1, 80077c6 <_realloc_r+0x16>
 80077bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077c0:	4611      	mov	r1, r2
 80077c2:	f7ff bc4d 	b.w	8007060 <_malloc_r>
 80077c6:	b92a      	cbnz	r2, 80077d4 <_realloc_r+0x24>
 80077c8:	f7ff fbde 	bl	8006f88 <_free_r>
 80077cc:	4625      	mov	r5, r4
 80077ce:	4628      	mov	r0, r5
 80077d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d4:	f000 f81a 	bl	800780c <_malloc_usable_size_r>
 80077d8:	4284      	cmp	r4, r0
 80077da:	4606      	mov	r6, r0
 80077dc:	d802      	bhi.n	80077e4 <_realloc_r+0x34>
 80077de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077e2:	d8f4      	bhi.n	80077ce <_realloc_r+0x1e>
 80077e4:	4621      	mov	r1, r4
 80077e6:	4638      	mov	r0, r7
 80077e8:	f7ff fc3a 	bl	8007060 <_malloc_r>
 80077ec:	4680      	mov	r8, r0
 80077ee:	b908      	cbnz	r0, 80077f4 <_realloc_r+0x44>
 80077f0:	4645      	mov	r5, r8
 80077f2:	e7ec      	b.n	80077ce <_realloc_r+0x1e>
 80077f4:	42b4      	cmp	r4, r6
 80077f6:	4622      	mov	r2, r4
 80077f8:	4629      	mov	r1, r5
 80077fa:	bf28      	it	cs
 80077fc:	4632      	movcs	r2, r6
 80077fe:	f7ff ffc9 	bl	8007794 <memcpy>
 8007802:	4629      	mov	r1, r5
 8007804:	4638      	mov	r0, r7
 8007806:	f7ff fbbf 	bl	8006f88 <_free_r>
 800780a:	e7f1      	b.n	80077f0 <_realloc_r+0x40>

0800780c <_malloc_usable_size_r>:
 800780c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007810:	1f18      	subs	r0, r3, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	bfbc      	itt	lt
 8007816:	580b      	ldrlt	r3, [r1, r0]
 8007818:	18c0      	addlt	r0, r0, r3
 800781a:	4770      	bx	lr

0800781c <_init>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	bf00      	nop
 8007820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007822:	bc08      	pop	{r3}
 8007824:	469e      	mov	lr, r3
 8007826:	4770      	bx	lr

08007828 <_fini>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	bf00      	nop
 800782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782e:	bc08      	pop	{r3}
 8007830:	469e      	mov	lr, r3
 8007832:	4770      	bx	lr
